<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="a00018" kind="page">
    <compoundname>md_Documentation_YarnSpinner-Dialogue_Yarn-Syntax</compoundname>
    <title>Yarn Quick Reference</title>
    <detaileddescription>
<para>This document is intended to act as a comprehensive and concise reference for <ref refid="a00048" kindref="compound">Yarn</ref> syntax and structure, for use by programmers and content creators. It assumes a working knowledge of modern programming/scripting languages. For a more thorough explanation of <ref refid="a00048" kindref="compound">Yarn</ref> usage, see the <ref refid="a00187" kindref="compound">General Usage Guide</ref></para><para><heading level="2">Table of Contents</heading>
</para><para><itemizedlist>
<listitem><para><ulink url="#nodes">Nodes</ulink></para></listitem><listitem><para><ulink url="#links-between-nodes">Links Between Nodes</ulink><itemizedlist>
<listitem><para><ulink url="#menu-syntax">Menu Syntax</ulink></para></listitem><listitem><para><ulink url="#option-syntax">Option Syntax</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#variables---conditionals">Variables &amp; Conditionals</ulink><itemizedlist>
<listitem><para><ulink url="#declaring-and-setting-variables">Declaring and Setting Variables</ulink></para></listitem><listitem><para><ulink url="#variable-types">Variable Types</ulink></para></listitem><listitem><para><ulink url="#if-else-statements">If/Else Statements</ulink></para></listitem><listitem><para><ulink url="#operator-synonyms">Operator Synonyms</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#commands-and-functions">Commands and Functions</ulink></para></listitem></itemizedlist>
</para><para><heading level="3">Nodes</heading>
</para><para>Nodes act as containers for <ref refid="a00048" kindref="compound">Yarn</ref> script, and must have unique titles. The script in the body of a node is processed line by line.</para><para>A node&apos;s header contains its metadata - by default, <ref refid="a00048" kindref="compound">Yarn</ref> only uses the <computeroutput>title</computeroutput> field, but can be extended to use arbitrary fields.</para><para>``` title: ExampleNodeName <heading level="2">tags: foo, bar </heading>
</para><para><ref refid="a00048" kindref="compound">Yarn</ref> content goes here. This is the second line. <hruler/>
 ```</para><para>A script file can contain multiple nodes. In this case, nodes are delineated using three equals (<computeroutput>=</computeroutput>) characters.</para><para>Additionally, <ref refid="a00048" kindref="compound">Yarn</ref> can check if a node has been visited by calling <computeroutput>visited(&quot;NodeName&quot;)</computeroutput> in an <computeroutput>if</computeroutput> statement (i.e. <computeroutput>&lt;&lt;if visited(&quot;NodeName&quot;) == true&gt;&gt;</computeroutput>).</para><para><heading level="3">Links Between Nodes</heading>
</para><para>Nodes link to other nodes through <emphasis>options</emphasis>. An option is composed of a label (optional) and a node name separated by a vertical bar (<computeroutput>|</computeroutput>), like so:</para><para>``` [[A Link To A Node|Node1]] ```</para><para>If a node link with no label is provided (<computeroutput>[[Node1]]</computeroutput>), <ref refid="a00048" kindref="compound">Yarn</ref> will automatically navigate to the linked node.</para><para><heading level="4">Menu Syntax</heading>
</para><para>Shortcut options allow for small branches in <ref refid="a00048" kindref="compound">Yarn</ref> scripts without requiring extra nodes. Shortcut option sets allow for an arbitrary number of sub-branches, but it&apos;s recommended that users stick to as few as possible for the sake of script readability.</para><para>``` Mae: What did you say to her? -&gt; Nothing. Mae: Oh, man. Maybe you should have. -&gt; That she was a jerk. Mae: Hah! I bet that pissed her off. Mae: How&apos;d she react? -&gt; She didn&apos;t. Mae: Booooo. That&apos;s boring. -&gt; Furiously. Mae: That&apos;s what I like to hear! Mae: Anyway, I&apos;d better get going. ```</para><para>Additionally, shortcut options can utilize conditional logic, commands and functions (detailed below), and can include standard node links. If a condition is attached to a shortcut option, the option will only appear to the reader if the condition passes:</para><para>``` Bob: What would you like? -&gt; A burger. &lt;&lt;if $money &gt; 5&gt;&gt; Bob: Nice. Enjoy! [[AteABurger]] -&gt; A soda. &lt;&lt;if $money &gt; 2&gt;&gt; Bob: Yum! [[DrankASoda]] -&gt; Nothing. Bob: Okay. Bob: Thanks for coming! ```</para><para><heading level="4">Option Syntax</heading>
</para><para>Multiple labeled node links on consecutive lines will be parsed as a menu. Example:</para><para>``` [[Option 1|Node1]] [[Option the Second|Node2]] [[Third Option|Node3]] ```</para><para><heading level="2">Variables &amp; Conditionals</heading>
</para><para><heading level="4">Declaring and Setting Variables</heading>
</para><para>``` &lt;&lt;set $ExampleVariable to 1&gt;&gt; ```</para><para>This statement serves to set a variable&apos;s value. No declarative statement is required; setting a variable&apos;s value brings it into existence.</para><para>Variable names must start with a <computeroutput>$</computeroutput> character.</para><para><heading level="4">Variable Types</heading>
</para><para>There are four different types of variable in <ref refid="a00048" kindref="compound">Yarn</ref>: strings, floating-point numbers, <ulink url="http://eesemi.com/boolean.htm">booleans</ulink>, and <computeroutput>null</computeroutput>.</para><para><ref refid="a00048" kindref="compound">Yarn</ref> will automatically convert between types. For example:</para><para>``` &lt;&lt;if &quot;hi&quot; == &quot;hi&quot;&gt;&gt; The two strings are the same! &lt;&lt;endif&gt;&gt;</para><para>&lt;&lt;if 1+1+&quot;hi&quot; == &quot;2hi&quot;&gt;&gt; Strings get joined together with other values! &lt;&lt;endif&gt;&gt; ```</para><para><heading level="4">If/Else Statements</heading>
</para><para><ref refid="a00048" kindref="compound">Yarn</ref> supports standard if/else/elseif statements.</para><para>``` &lt;&lt;if &quot;hi&quot; == &quot;hi&quot;&gt;&gt; The two strings are the same! &lt;&lt;endif&gt;&gt; ```</para><para>``` &lt;&lt;if $variable == 1&gt;&gt; Success! &lt;&lt;elseif $variable == &quot;hello&quot;&gt;&gt; Success...? &lt;&lt;else&gt;&gt; No success. :( &lt;&lt;endif&gt;&gt; ```</para><para><heading level="4">Operator Synonyms</heading>
</para><para><heading level="5">Assignment</heading>
</para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>word </para></entry><entry thead="yes"><para>symbol  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>to</computeroutput> </para></entry><entry thead="no"><para><computeroutput>=</computeroutput> </para></entry></row>
</table>
<heading level="5">Comparison</heading>
</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para>word </para></entry><entry thead="yes"><para>symbol  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>and</computeroutput> </para></entry><entry thead="no"><para><computeroutput>&amp;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>le</computeroutput> </para></entry><entry thead="no"><para><computeroutput>&lt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>gt</computeroutput> </para></entry><entry thead="no"><para><computeroutput>&gt;</computeroutput> </para></entry></row>
</table>
| <computeroutput>or</computeroutput> | <computeroutput>||</computeroutput> | | <computeroutput>leq</computeroutput> | <computeroutput>&lt;=</computeroutput> | | <computeroutput>geq</computeroutput> | <computeroutput>&gt;=</computeroutput> | | <computeroutput>eq</computeroutput> | <computeroutput>==</computeroutput> | | <computeroutput>is</computeroutput> | <computeroutput>==</computeroutput> | | <computeroutput>neq</computeroutput> | <computeroutput>!=</computeroutput> | | <computeroutput>not</computeroutput> | <computeroutput>!</computeroutput> |</para><para><heading level="2">Commands and Functions</heading>
</para><para>By default, <ref refid="a00048" kindref="compound">Yarn</ref> Spinner includes a <computeroutput>visited()</computeroutput> function, used to check whether a node has been entered. ``` &lt;&lt;if visited(&quot;GoToCity&quot;)&gt;&gt; We have gone to the city before! &lt;&lt;endif&gt;&gt; ``` Additional functions and commands can be added at run-time. See ../YarnSpinner-Programming/Extending.md &quot;&quot;Extending <ref refid="a00048" kindref="compound">Yarn</ref> Spinner&quot;&quot; for more info. </para>    </detaileddescription>
  </compounddef>
</doxygen>
