<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="a00289" kind="file">
    <compoundname>Microsoft.CodeQuality.Analyzers.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal">Sr.<sp/>No.<sp/>|<sp/>Rule<sp/>ID<sp/>|<sp/>Title<sp/>|<sp/>Category<sp/>|<sp/>Enabled<sp/>|<sp/>CodeFix<sp/>|<sp/>Description<sp/>|</highlight></codeline>
<codeline lineno="3"><highlight class="normal">--------|---------|-------|----------|---------|---------|--------------------------------------------------------------------------------------------------------------|</highlight></codeline>
<codeline lineno="4"><highlight class="normal">1<sp/>|<sp/>[CA1000](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1000-do-not-declare-static-members-on-generic-types)<sp/>|<sp/>Do<sp/>not<sp/>declare<sp/>static<sp/>members<sp/>on<sp/>generic<sp/>types<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>When<sp/>a<sp/>static<sp/>member<sp/>of<sp/>a<sp/>generic<sp/>type<sp/>is<sp/>called,<sp/>the<sp/>type<sp/>argument<sp/>must<sp/>be<sp/>specified<sp/>for<sp/>the<sp/>type.<sp/>When<sp/>a<sp/>generic<sp/>instance<sp/>member<sp/>that<sp/>does<sp/>not<sp/>support<sp/>inference<sp/>is<sp/>called,<sp/>the<sp/>type<sp/>argument<sp/>must<sp/>be<sp/>specified<sp/>for<sp/>the<sp/>member.<sp/>In<sp/>these<sp/>two<sp/>cases,<sp/>the<sp/>syntax<sp/>for<sp/>specifying<sp/>the<sp/>type<sp/>argument<sp/>is<sp/>different<sp/>and<sp/>easily<sp/>confused.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">2<sp/>|<sp/>[CA1001](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1001-types-that-own-disposable-fields-should-be-disposable)<sp/>|<sp/>Types<sp/>that<sp/>own<sp/>disposable<sp/>fields<sp/>should<sp/>be<sp/>disposable<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>class<sp/>declares<sp/>and<sp/>implements<sp/>an<sp/>instance<sp/>field<sp/>that<sp/>is<sp/>a<sp/>System.IDisposable<sp/>type,<sp/>and<sp/>the<sp/>class<sp/>does<sp/>not<sp/>implement<sp/>IDisposable.<sp/>A<sp/>class<sp/>that<sp/>declares<sp/>an<sp/>IDisposable<sp/>field<sp/>indirectly<sp/>owns<sp/>an<sp/>unmanaged<sp/>resource<sp/>and<sp/>should<sp/>implement<sp/>the<sp/>IDisposable<sp/>interface.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal">3<sp/>|<sp/>[CA1003](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1003-use-generic-event-handler-instances)<sp/>|<sp/>Use<sp/>generic<sp/>event<sp/>handler<sp/>instances<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>A<sp/>type<sp/>contains<sp/>an<sp/>event<sp/>that<sp/>declares<sp/>an<sp/>EventHandler<sp/>delegate<sp/>that<sp/>returns<sp/>void,<sp/>whose<sp/>signature<sp/>contains<sp/>two<sp/>parameters<sp/>(the<sp/>first<sp/>an<sp/>object<sp/>and<sp/>the<sp/>second<sp/>a<sp/>type<sp/>that<sp/>is<sp/>assignable<sp/>to<sp/>EventArgs),<sp/>and<sp/>the<sp/>containing<sp/>assembly<sp/>targets<sp/>Microsoft<sp/>.NET<sp/>Framework?2.0.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">4<sp/>|<sp/>[CA1008](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1008-enums-should-have-zero-value)<sp/>|<sp/>Enums<sp/>should<sp/>have<sp/>zero<sp/>value<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>The<sp/>default<sp/>value<sp/>of<sp/>an<sp/>uninitialized<sp/>enumeration,<sp/>just<sp/>as<sp/>other<sp/>value<sp/>types,<sp/>is<sp/>zero.<sp/>A<sp/>nonflags-attributed<sp/>enumeration<sp/>should<sp/>define<sp/>a<sp/>member<sp/>by<sp/>using<sp/>the<sp/>value<sp/>of<sp/>zero<sp/>so<sp/>that<sp/>the<sp/>default<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>value<sp/>of<sp/>the<sp/>enumeration.<sp/>If<sp/>an<sp/>enumeration<sp/>that<sp/>has<sp/>the<sp/>FlagsAttribute<sp/>attribute<sp/>applied<sp/>defines<sp/>a<sp/>zero-valued<sp/>member,<sp/>its<sp/>name<sp/>should<sp/>be<sp/>&quot;&quot;None&quot;&quot;<sp/>to<sp/>indicate<sp/>that<sp/>no<sp/>values<sp/>have<sp/>been<sp/>set<sp/>in<sp/>the<sp/>enumeration.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">5<sp/>|<sp/>[CA1010](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1010-collections-should-implement-generic-interface)<sp/>|<sp/>Collections<sp/>should<sp/>implement<sp/>generic<sp/>interface<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>To<sp/>broaden<sp/>the<sp/>usability<sp/>of<sp/>a<sp/>collection,<sp/>implement<sp/>one<sp/>of<sp/>the<sp/>generic<sp/>collection<sp/>interfaces.<sp/>Then<sp/>the<sp/>collection<sp/>can<sp/>be<sp/>used<sp/>to<sp/>populate<sp/>generic<sp/>collection<sp/>types.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">6<sp/>|<sp/>[CA1012](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1012-abstract-types-should-not-have-constructors)<sp/>|<sp/>Abstract<sp/>types<sp/>should<sp/>not<sp/>have<sp/>constructors<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>Constructors<sp/>on<sp/>abstract<sp/>types<sp/>can<sp/>be<sp/>called<sp/>only<sp/>by<sp/>derived<sp/>types.<sp/>Because<sp/>public<sp/>constructors<sp/>create<sp/>instances<sp/>of<sp/>a<sp/>type,<sp/>and<sp/>you<sp/>cannot<sp/>create<sp/>instances<sp/>of<sp/>an<sp/>abstract<sp/>type,<sp/>an<sp/>abstract<sp/>type<sp/>that<sp/>has<sp/>a<sp/>public<sp/>constructor<sp/>is<sp/>incorrectly<sp/>designed.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">7<sp/>|<sp/>[CA1014](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1014-mark-assemblies-with-clscompliantattribute)<sp/>|<sp/>Mark<sp/>assemblies<sp/>with<sp/>CLSCompliant<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>The<sp/>Common<sp/>Language<sp/>Specification<sp/>(CLS)<sp/>defines<sp/>naming<sp/>restrictions,<sp/>data<sp/>types,<sp/>and<sp/>rules<sp/>to<sp/>which<sp/>assemblies<sp/>must<sp/>conform<sp/>if<sp/>they<sp/>will<sp/>be<sp/>used<sp/>across<sp/>programming<sp/>languages.<sp/>Good<sp/>design<sp/>dictates<sp/>that<sp/>all<sp/>assemblies<sp/>explicitly<sp/>indicate<sp/>CLS<sp/>compliance<sp/>by<sp/>using<sp/>CLSCompliantAttribute<sp/>.<sp/>If<sp/>this<sp/>attribute<sp/>is<sp/>not<sp/>present<sp/>on<sp/>an<sp/>assembly,<sp/>the<sp/>assembly<sp/>is<sp/>not<sp/>compliant.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">8<sp/>|<sp/>[CA1016](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1016-mark-assemblies-with-assemblyversionattribute)<sp/>|<sp/>Mark<sp/>assemblies<sp/>with<sp/>assembly<sp/>version<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>The<sp/>.NET<sp/>Framework<sp/>uses<sp/>the<sp/>version<sp/>number<sp/>to<sp/>uniquely<sp/>identify<sp/>an<sp/>assembly,<sp/>and<sp/>to<sp/>bind<sp/>to<sp/>types<sp/>in<sp/>strongly<sp/>named<sp/>assemblies.<sp/>The<sp/>version<sp/>number<sp/>is<sp/>used<sp/>together<sp/>with<sp/>version<sp/>and<sp/>publisher<sp/>policy.<sp/>By<sp/>default,<sp/>applications<sp/>run<sp/>only<sp/>with<sp/>the<sp/>assembly<sp/>version<sp/>with<sp/>which<sp/>they<sp/>were<sp/>built.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">9<sp/>|<sp/>[CA1017](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1017-mark-assemblies-with-comvisibleattribute)<sp/>|<sp/>Mark<sp/>assemblies<sp/>with<sp/>ComVisible<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>ComVisibleAttribute<sp/>determines<sp/>how<sp/>COM<sp/>clients<sp/>access<sp/>managed<sp/>code.<sp/>Good<sp/>design<sp/>dictates<sp/>that<sp/>assemblies<sp/>explicitly<sp/>indicate<sp/>COM<sp/>visibility.<sp/>COM<sp/>visibility<sp/>can<sp/>be<sp/>set<sp/>for<sp/>the<sp/>whole<sp/>assembly<sp/>and<sp/>then<sp/>overridden<sp/>for<sp/>individual<sp/>types<sp/>and<sp/>type<sp/>members.<sp/>If<sp/>this<sp/>attribute<sp/>is<sp/>not<sp/>present,<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>assembly<sp/>are<sp/>visible<sp/>to<sp/>COM<sp/>clients.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">10<sp/>|<sp/>[CA1018](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1018-mark-attributes-with-attributeusageattribute)<sp/>|<sp/>Mark<sp/>attributes<sp/>with<sp/>AttributeUsageAttribute<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>Specify<sp/>AttributeUsage<sp/>on<sp/>{0}.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">11<sp/>|<sp/>[CA1019](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1019-define-accessors-for-attribute-arguments)<sp/>|<sp/>Define<sp/>accessors<sp/>for<sp/>attribute<sp/>arguments<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>Remove<sp/>the<sp/>property<sp/>setter<sp/>from<sp/>{0}<sp/>or<sp/>reduce<sp/>its<sp/>accessibility<sp/>because<sp/>it<sp/>corresponds<sp/>to<sp/>positional<sp/>argument<sp/>{1}.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">12<sp/>|<sp/>[CA1024](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1024-use-properties-where-appropriate)<sp/>|<sp/>Use<sp/>properties<sp/>where<sp/>appropriate<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>A<sp/>public<sp/>or<sp/>protected<sp/>method<sp/>has<sp/>a<sp/>name<sp/>that<sp/>starts<sp/>with<sp/>&quot;&quot;Get&quot;&quot;,<sp/>takes<sp/>no<sp/>parameters,<sp/>and<sp/>returns<sp/>a<sp/>value<sp/>that<sp/>is<sp/>not<sp/>an<sp/>array.<sp/>The<sp/>method<sp/>might<sp/>be<sp/>a<sp/>good<sp/>candidate<sp/>to<sp/>become<sp/>a<sp/>property.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">13<sp/>|<sp/>[CA1027](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1027-mark-enums-with-flagsattribute)<sp/>|<sp/>Mark<sp/>enums<sp/>with<sp/>FlagsAttribute<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>An<sp/>enumeration<sp/>is<sp/>a<sp/>value<sp/>type<sp/>that<sp/>defines<sp/>a<sp/>set<sp/>of<sp/>related<sp/>named<sp/>constants.<sp/>Apply<sp/>FlagsAttribute<sp/>to<sp/>an<sp/>enumeration<sp/>when<sp/>its<sp/>named<sp/>constants<sp/>can<sp/>be<sp/>meaningfully<sp/>combined.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">14<sp/>|<sp/>[CA1028](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1028-enum-storage-should-be-int32)<sp/>|<sp/>Enum<sp/>Storage<sp/>should<sp/>be<sp/>Int32<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>An<sp/>enumeration<sp/>is<sp/>a<sp/>value<sp/>type<sp/>that<sp/>defines<sp/>a<sp/>set<sp/>of<sp/>related<sp/>named<sp/>constants.<sp/>By<sp/>default,<sp/>the<sp/>System.Int32<sp/>data<sp/>type<sp/>is<sp/>used<sp/>to<sp/>store<sp/>the<sp/>constant<sp/>value.<sp/>Although<sp/>you<sp/>can<sp/>change<sp/>this<sp/>underlying<sp/>type,<sp/>it<sp/>is<sp/>not<sp/>required<sp/>or<sp/>recommended<sp/>for<sp/>most<sp/>scenarios.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">15<sp/>|<sp/>[CA1030](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1030-use-events-where-appropriate)<sp/>|<sp/>Use<sp/>events<sp/>where<sp/>appropriate<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>This<sp/>rule<sp/>detects<sp/>methods<sp/>that<sp/>have<sp/>names<sp/>that<sp/>ordinarily<sp/>would<sp/>be<sp/>used<sp/>for<sp/>events.<sp/>If<sp/>a<sp/>method<sp/>is<sp/>called<sp/>in<sp/>response<sp/>to<sp/>a<sp/>clearly<sp/>defined<sp/>state<sp/>change,<sp/>the<sp/>method<sp/>should<sp/>be<sp/>invoked<sp/>by<sp/>an<sp/>event<sp/>handler.<sp/>Objects<sp/>that<sp/>call<sp/>the<sp/>method<sp/>should<sp/>raise<sp/>events<sp/>instead<sp/>of<sp/>calling<sp/>the<sp/>method<sp/>directly.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">16<sp/>|<sp/>[CA1031](https:</highlight><highlight class="comment">//docs.microsoft.com/en-us/visualstudio/code-quality/ca1031-do-not-catch-general-exception-types)<sp/>|<sp/>Do<sp/>not<sp/>catch<sp/>general<sp/>exception<sp/>types<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>A<sp/>general<sp/>exception<sp/>such<sp/>as<sp/>System.Exception<sp/>or<sp/>System.SystemException<sp/>is<sp/>caught<sp/>in<sp/>a<sp/>catch<sp/>statement,<sp/>or<sp/>a<sp/>general<sp/>catch<sp/>clause<sp/>is<sp/>used.<sp/>General<sp/>exceptions<sp/>should<sp/>not<sp/>be<sp/>caught.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">17<sp/>|<sp/>[CA1032](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1032-implement-standard-exception-constructors)<sp/>|<sp/>Implement<sp/>standard<sp/>exception<sp/>constructors<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Failure<sp/>to<sp/>provide<sp/>the<sp/>full<sp/>set<sp/>of<sp/>constructors<sp/>can<sp/>make<sp/>it<sp/>difficult<sp/>to<sp/>correctly<sp/>handle<sp/>exceptions.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">18<sp/>|<sp/>[CA1033](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1033-interface-methods-should-be-callable-by-child-types)<sp/>|<sp/>Interface<sp/>methods<sp/>should<sp/>be<sp/>callable<sp/>by<sp/>child<sp/>types<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>An<sp/>unsealed<sp/>externally<sp/>visible<sp/>type<sp/>provides<sp/>an<sp/>explicit<sp/>method<sp/>implementation<sp/>of<sp/>a<sp/>public<sp/>interface<sp/>and<sp/>does<sp/>not<sp/>provide<sp/>an<sp/>alternative<sp/>externally<sp/>visible<sp/>method<sp/>that<sp/>has<sp/>the<sp/>same<sp/>name.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">19<sp/>|<sp/>[CA1034](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1034-nested-types-should-not-be-visible)<sp/>|<sp/>Nested<sp/>types<sp/>should<sp/>not<sp/>be<sp/>visible<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>A<sp/>nested<sp/>type<sp/>is<sp/>a<sp/>type<sp/>that<sp/>is<sp/>declared<sp/>in<sp/>the<sp/>scope<sp/>of<sp/>another<sp/>type.<sp/>Nested<sp/>types<sp/>are<sp/>useful<sp/>to<sp/>encapsulate<sp/>private<sp/>implementation<sp/>details<sp/>of<sp/>the<sp/>containing<sp/>type.<sp/>Used<sp/>for<sp/>this<sp/>purpose,<sp/>nested<sp/>types<sp/>should<sp/>not<sp/>be<sp/>externally<sp/>visible.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">20<sp/>|<sp/>[CA1036](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1036-override-methods-on-comparable-types)<sp/>|<sp/>Override<sp/>methods<sp/>on<sp/>comparable<sp/>types<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>public<sp/>or<sp/>protected<sp/>type<sp/>implements<sp/>the<sp/>System.IComparable<sp/>interface.<sp/>It<sp/>does<sp/>not<sp/>override<sp/>Object.Equals<sp/>nor<sp/>does<sp/>it<sp/>overload<sp/>the<sp/>language-specific<sp/>operator<sp/>for<sp/>equality,<sp/>inequality,<sp/>less<sp/>than,<sp/>less<sp/>than<sp/>or<sp/>equal,<sp/>greater<sp/>than<sp/>or<sp/>greater<sp/>than<sp/>or<sp/>equal.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">21<sp/>|<sp/>[CA1040](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1040-avoid-empty-interfaces)<sp/>|<sp/>Avoid<sp/>empty<sp/>interfaces<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Interfaces<sp/>define<sp/>members<sp/>that<sp/>provide<sp/>a<sp/>behavior<sp/>or<sp/>usage<sp/>contract.<sp/>The<sp/>functionality<sp/>that<sp/>is<sp/>described<sp/>by<sp/>the<sp/>interface<sp/>can<sp/>be<sp/>adopted<sp/>by<sp/>any<sp/>type,<sp/>regardless<sp/>of<sp/>where<sp/>the<sp/>type<sp/>appears<sp/>in<sp/>the<sp/>inheritance<sp/>hierarchy.<sp/>A<sp/>type<sp/>implements<sp/>an<sp/>interface<sp/>by<sp/>providing<sp/>implementations<sp/>for<sp/>the<sp/>members<sp/>of<sp/>the<sp/>interface.<sp/>An<sp/>empty<sp/>interface<sp/>does<sp/>not<sp/>define<sp/>any<sp/>members;<sp/>therefore,<sp/>it<sp/>does<sp/>not<sp/>define<sp/>a<sp/>contract<sp/>that<sp/>can<sp/>be<sp/>implemented.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">22<sp/>|<sp/>[CA1041](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1041-provide-obsoleteattribute-message)<sp/>|<sp/>Provide<sp/>ObsoleteAttribute<sp/>message<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>A<sp/>type<sp/>or<sp/>member<sp/>is<sp/>marked<sp/>by<sp/>using<sp/>a<sp/>System.ObsoleteAttribute<sp/>attribute<sp/>that<sp/>does<sp/>not<sp/>have<sp/>its<sp/>ObsoleteAttribute.Message<sp/>property<sp/>specified.<sp/>When<sp/>a<sp/>type<sp/>or<sp/>member<sp/>that<sp/>is<sp/>marked<sp/>by<sp/>using<sp/>ObsoleteAttribute<sp/>is<sp/>compiled,<sp/>the<sp/>Message<sp/>property<sp/>of<sp/>the<sp/>attribute<sp/>is<sp/>displayed.<sp/>This<sp/>gives<sp/>the<sp/>user<sp/>information<sp/>about<sp/>the<sp/>obsolete<sp/>type<sp/>or<sp/>member.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">23<sp/>|<sp/>[CA1043](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1043-use-integral-or-string-argument-for-indexers)<sp/>|<sp/>Use<sp/>Integral<sp/>Or<sp/>String<sp/>Argument<sp/>For<sp/>Indexers<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>Indexers,<sp/>that<sp/>is,<sp/>indexed<sp/>properties,<sp/>should<sp/>use<sp/>integer<sp/>or<sp/>string<sp/>types<sp/>for<sp/>the<sp/>index.<sp/>These<sp/>types<sp/>are<sp/>typically<sp/>used<sp/>for<sp/>indexing<sp/>data<sp/>structures<sp/>and<sp/>increase<sp/>the<sp/>usability<sp/>of<sp/>the<sp/>library.<sp/>Use<sp/>of<sp/>the<sp/>Object<sp/>type<sp/>should<sp/>be<sp/>restricted<sp/>to<sp/>those<sp/>cases<sp/>where<sp/>the<sp/>specific<sp/>integer<sp/>or<sp/>string<sp/>type<sp/>cannot<sp/>be<sp/>specified<sp/>at<sp/>design<sp/>time.<sp/>If<sp/>the<sp/>design<sp/>requires<sp/>other<sp/>types<sp/>for<sp/>the<sp/>index,<sp/>reconsider<sp/>whether<sp/>the<sp/>type<sp/>represents<sp/>a<sp/>logical<sp/>data<sp/>store.<sp/>If<sp/>it<sp/>does<sp/>not<sp/>represent<sp/>a<sp/>logical<sp/>data<sp/>store,<sp/>use<sp/>a<sp/>method.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">24<sp/>|<sp/>[CA1044](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1044-properties-should-not-be-write-only)<sp/>|<sp/>Properties<sp/>should<sp/>not<sp/>be<sp/>write<sp/>only<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>Although<sp/>it<sp/>is<sp/>acceptable<sp/>and<sp/>often<sp/>necessary<sp/>to<sp/>have<sp/>a<sp/>read-only<sp/>property,<sp/>the<sp/>design<sp/>guidelines<sp/>prohibit<sp/>the<sp/>use<sp/>of<sp/>write-only<sp/>properties.<sp/>This<sp/>is<sp/>because<sp/>letting<sp/>a<sp/>user<sp/>set<sp/>a<sp/>value,<sp/>and<sp/>then<sp/>preventing<sp/>the<sp/>user<sp/>from<sp/>viewing<sp/>that<sp/>value,<sp/>does<sp/>not<sp/>provide<sp/>any<sp/>security.<sp/>Also,<sp/>without<sp/>read<sp/>access,<sp/>the<sp/>state<sp/>of<sp/>shared<sp/>objects<sp/>cannot<sp/>be<sp/>viewed,<sp/>which<sp/>limits<sp/>their<sp/>usefulness.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">25<sp/>|<sp/>[CA1050](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1050-declare-types-in-namespaces)<sp/>|<sp/>Declare<sp/>types<sp/>in<sp/>namespaces<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>Types<sp/>are<sp/>declared<sp/>in<sp/>namespaces<sp/>to<sp/>prevent<sp/>name<sp/>collisions<sp/>and<sp/>as<sp/>a<sp/>way<sp/>to<sp/>organize<sp/>related<sp/>types<sp/>in<sp/>an<sp/>object<sp/>hierarchy.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">26<sp/>|<sp/>[CA1051](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1051-do-not-declare-visible-instance-fields)<sp/>|<sp/>Do<sp/>not<sp/>declare<sp/>visible<sp/>instance<sp/>fields<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>The<sp/>primary<sp/>use<sp/>of<sp/>a<sp/>field<sp/>should<sp/>be<sp/>as<sp/>an<sp/>implementation<sp/>detail.<sp/>Fields<sp/>should<sp/>be<sp/>private<sp/>or<sp/>internal<sp/>and<sp/>should<sp/>be<sp/>exposed<sp/>by<sp/>using<sp/>properties.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">27<sp/>|<sp/>[CA1052](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1052-static-holder-types-should-be-sealed)<sp/>|<sp/>Static<sp/>holder<sp/>types<sp/>should<sp/>be<sp/>Static<sp/>or<sp/>NotInheritable<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Type<sp/>&apos;{0}&apos;<sp/>is<sp/>a<sp/>static<sp/>holder<sp/>type<sp/>but<sp/>is<sp/>neither<sp/>static<sp/>nor<sp/>NotInheritable<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">28<sp/>|<sp/>[CA1054](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1054-uri-parameters-should-not-be-strings)<sp/>|<sp/>Uri<sp/>parameters<sp/>should<sp/>not<sp/>be<sp/>strings<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>If<sp/>a<sp/>method<sp/>takes<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>a<sp/>URI,<sp/>a<sp/>corresponding<sp/>overload<sp/>should<sp/>be<sp/>provided<sp/>that<sp/>takes<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>URI<sp/>class,<sp/>which<sp/>provides<sp/>these<sp/>services<sp/>in<sp/>a<sp/>safe<sp/>and<sp/>secure<sp/>manner.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">29<sp/>|<sp/>[CA1055](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1055-uri-return-values-should-not-be-strings)<sp/>|<sp/>Uri<sp/>return<sp/>values<sp/>should<sp/>not<sp/>be<sp/>strings<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>This<sp/>rule<sp/>assumes<sp/>that<sp/>the<sp/>method<sp/>returns<sp/>a<sp/>URI.<sp/>A<sp/>string<sp/>representation<sp/>of<sp/>a<sp/>URI<sp/>is<sp/>prone<sp/>to<sp/>parsing<sp/>and<sp/>encoding<sp/>errors,<sp/>and<sp/>can<sp/>lead<sp/>to<sp/>security<sp/>vulnerabilities.<sp/>The<sp/>System.Uri<sp/>class<sp/>provides<sp/>these<sp/>services<sp/>in<sp/>a<sp/>safe<sp/>and<sp/>secure<sp/>manner.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">30<sp/>|<sp/>[CA1056](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1056-uri-properties-should-not-be-strings)<sp/>|<sp/>Uri<sp/>properties<sp/>should<sp/>not<sp/>be<sp/>strings<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>This<sp/>rule<sp/>assumes<sp/>that<sp/>the<sp/>property<sp/>represents<sp/>a<sp/>Uniform<sp/>Resource<sp/>Identifier<sp/>(URI).<sp/>A<sp/>string<sp/>representation<sp/>of<sp/>a<sp/>URI<sp/>is<sp/>prone<sp/>to<sp/>parsing<sp/>and<sp/>encoding<sp/>errors,<sp/>and<sp/>can<sp/>lead<sp/>to<sp/>security<sp/>vulnerabilities.<sp/>The<sp/>System.Uri<sp/>class<sp/>provides<sp/>these<sp/>services<sp/>in<sp/>a<sp/>safe<sp/>and<sp/>secure<sp/>manner.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">31<sp/>|<sp/>[CA1060](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1060-move-p-invokes-to-nativemethods-class)<sp/>|<sp/>Move<sp/>pinvokes<sp/>to<sp/>native<sp/>methods<sp/>class<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>Platform<sp/>Invocation<sp/>methods,<sp/>such<sp/>as<sp/>those<sp/>that<sp/>are<sp/>marked<sp/>by<sp/>using<sp/>the<sp/>System.Runtime.InteropServices.DllImportAttribute<sp/>attribute,<sp/>or<sp/>methods<sp/>that<sp/>are<sp/>defined<sp/>by<sp/>using<sp/>the<sp/>Declare<sp/>keyword<sp/>in<sp/>Visual<sp/>Basic,<sp/>access<sp/>unmanaged<sp/>code.<sp/>These<sp/>methods<sp/>should<sp/>be<sp/>of<sp/>the<sp/>NativeMethods,<sp/>SafeNativeMethods,<sp/>or<sp/>UnsafeNativeMethods<sp/>class.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">32<sp/>|<sp/>[CA1061](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1061-do-not-hide-base-class-methods)<sp/>|<sp/>Do<sp/>not<sp/>hide<sp/>base<sp/>class<sp/>methods<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>method<sp/>in<sp/>a<sp/>base<sp/>type<sp/>is<sp/>hidden<sp/>by<sp/>an<sp/>identically<sp/>named<sp/>method<sp/>in<sp/>a<sp/>derived<sp/>type<sp/>when<sp/>the<sp/>parameter<sp/>signature<sp/>of<sp/>the<sp/>derived<sp/>method<sp/>differs<sp/>only<sp/>by<sp/>types<sp/>that<sp/>are<sp/>more<sp/>weakly<sp/>derived<sp/>than<sp/>the<sp/>corresponding<sp/>types<sp/>in<sp/>the<sp/>parameter<sp/>signature<sp/>of<sp/>the<sp/>base<sp/>method.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">33<sp/>|<sp/>[CA1062](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1062-validate-arguments-of-public-methods)<sp/>|<sp/>Validate<sp/>arguments<sp/>of<sp/>public<sp/>methods<sp/>|<sp/>Design<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>An<sp/>externally<sp/>visible<sp/>method<sp/>dereferences<sp/>one<sp/>of<sp/>its<sp/>reference<sp/>arguments<sp/>without<sp/>verifying<sp/>whether<sp/>that<sp/>argument<sp/>is<sp/>null<sp/>(Nothing<sp/>in<sp/>Visual<sp/>Basic).<sp/>All<sp/>reference<sp/>arguments<sp/>that<sp/>are<sp/>passed<sp/>to<sp/>externally<sp/>visible<sp/>methods<sp/>should<sp/>be<sp/>checked<sp/>against<sp/>null.<sp/>If<sp/>appropriate,<sp/>throw<sp/>an<sp/>ArgumentNullException<sp/>when<sp/>the<sp/>argument<sp/>is<sp/>null<sp/>or<sp/>add<sp/>a<sp/>Code<sp/>Contract<sp/>precondition<sp/>asserting<sp/>non-null<sp/>argument.<sp/>If<sp/>the<sp/>method<sp/>is<sp/>designed<sp/>to<sp/>be<sp/>called<sp/>only<sp/>by<sp/>known<sp/>assemblies,<sp/>you<sp/>should<sp/>make<sp/>the<sp/>method<sp/>internal.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">34<sp/>|<sp/>[CA1063](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1063-implement-idisposable-correctly)<sp/>|<sp/>Implement<sp/>IDisposable<sp/>Correctly<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>All<sp/>IDisposable<sp/>types<sp/>should<sp/>implement<sp/>the<sp/>Dispose<sp/>pattern<sp/>correctly.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">35<sp/>|<sp/>[CA1064](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1064-exceptions-should-be-public)<sp/>|<sp/>Exceptions<sp/>should<sp/>be<sp/>public<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>An<sp/>internal<sp/>exception<sp/>is<sp/>visible<sp/>only<sp/>inside<sp/>its<sp/>own<sp/>internal<sp/>scope.<sp/>After<sp/>the<sp/>exception<sp/>falls<sp/>outside<sp/>the<sp/>internal<sp/>scope,<sp/>only<sp/>the<sp/>base<sp/>exception<sp/>can<sp/>be<sp/>used<sp/>to<sp/>catch<sp/>the<sp/>exception.<sp/>If<sp/>the<sp/>internal<sp/>exception<sp/>is<sp/>inherited<sp/>from<sp/>T:System.Exception,<sp/>T:System.SystemException,<sp/>or<sp/>T:System.ApplicationException,<sp/>the<sp/>external<sp/>code<sp/>will<sp/>not<sp/>have<sp/>sufficient<sp/>information<sp/>to<sp/>know<sp/>what<sp/>to<sp/>do<sp/>with<sp/>the<sp/>exception.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">36<sp/>|<sp/>[CA1065](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1065-do-not-raise-exceptions-in-unexpected-locations)<sp/>|<sp/>Do<sp/>not<sp/>raise<sp/>exceptions<sp/>in<sp/>unexpected<sp/>locations<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>A<sp/>method<sp/>that<sp/>is<sp/>not<sp/>expected<sp/>to<sp/>throw<sp/>exceptions<sp/>throws<sp/>an<sp/>exception.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">37<sp/>|<sp/>[CA1066](http:</highlight><highlight class="comment">//go.microsoft.com/fwlink/?LinkId=734907)<sp/>|<sp/>Type<sp/>{0}<sp/>should<sp/>implement<sp/>IEquatable&lt;T&gt;<sp/>because<sp/>it<sp/>overrides<sp/>Equals<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>When<sp/>a<sp/>type<sp/>T<sp/>overrides<sp/>Object.Equals(object),<sp/>the<sp/>implementation<sp/>must<sp/>cast<sp/>the<sp/>object<sp/>argument<sp/>to<sp/>the<sp/>correct<sp/>type<sp/>T<sp/>before<sp/>performing<sp/>the<sp/>comparison.<sp/>If<sp/>the<sp/>type<sp/>implements<sp/>IEquatable&lt;T&gt;,<sp/>and<sp/>therefore<sp/>offers<sp/>the<sp/>method<sp/>T.Equals(T),<sp/>and<sp/>if<sp/>the<sp/>argument<sp/>is<sp/>known<sp/>at<sp/>compile<sp/>time<sp/>to<sp/>be<sp/>of<sp/>type<sp/>T,<sp/>then<sp/>the<sp/>compiler<sp/>can<sp/>call<sp/>IEquatable&lt;T&gt;.Equals(T)<sp/>instead<sp/>of<sp/>Object.Equals(object),<sp/>and<sp/>no<sp/>cast<sp/>is<sp/>necessary,<sp/>improving<sp/>performance.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">38<sp/>|<sp/>[CA1067](http:</highlight><highlight class="comment">//go.microsoft.com/fwlink/?LinkId=734909)<sp/>|<sp/>Override<sp/>Object.Equals(object)<sp/>when<sp/>implementing<sp/>IEquatable&lt;T&gt;<sp/>|<sp/>Design<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>When<sp/>a<sp/>type<sp/>T<sp/>implements<sp/>the<sp/>interface<sp/>IEquatable&lt;T&gt;,<sp/>it<sp/>suggests<sp/>to<sp/>a<sp/>user<sp/>who<sp/>sees<sp/>a<sp/>call<sp/>to<sp/>the<sp/>Equals<sp/>method<sp/>in<sp/>source<sp/>code<sp/>that<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>type<sp/>can<sp/>be<sp/>equated<sp/>with<sp/>an<sp/>instance<sp/>of<sp/>any<sp/>other<sp/>type.<sp/>The<sp/>user<sp/>might<sp/>be<sp/>confused<sp/>if<sp/>their<sp/>attempt<sp/>to<sp/>equate<sp/>the<sp/>type<sp/>with<sp/>an<sp/>instance<sp/>of<sp/>another<sp/>type<sp/>fails<sp/>to<sp/>compile.<sp/>This<sp/>violates<sp/>the<sp/>&quot;principle<sp/>of<sp/>least<sp/>surprise&quot;.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">39<sp/>|<sp/>CA1068<sp/>|<sp/>CancellationToken<sp/>parameters<sp/>must<sp/>come<sp/>last<sp/>|<sp/>Design<sp/>|<sp/><ref refid="a00051_1a301aa7c866593a5b625a8fc158bbeaceaf827cf462f62848df37c5e1e94a4da74" kindref="member">True</ref><sp/>|<sp/><ref refid="a00051_1a301aa7c866593a5b625a8fc158bbeaceaf8320b26d30ab433c5a54546d21f414c" kindref="member">False</ref><sp/>|<sp/>Method<sp/></highlight><highlight class="stringliteral">&apos;{0}&apos;</highlight><highlight class="normal"><sp/>should<sp/>take<sp/>CancellationToken<sp/>as<sp/>the<sp/>last<sp/>parameter<sp/>|</highlight></codeline>
<codeline lineno="43"><highlight class="normal">40<sp/>|<sp/>CA1200<sp/>|<sp/>Avoid<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cref<sp/>tags<sp/>with<sp/>a<sp/>prefix<sp/>|<sp/>Documentation<sp/>|<sp/><ref refid="a00051_1a301aa7c866593a5b625a8fc158bbeaceaf827cf462f62848df37c5e1e94a4da74" kindref="member">True</ref><sp/>|<sp/><ref refid="a00051_1a301aa7c866593a5b625a8fc158bbeaceaf827cf462f62848df37c5e1e94a4da74" kindref="member">True</ref><sp/>|<sp/>Use<sp/>of<sp/>cref<sp/>tags<sp/>with<sp/>prefixes<sp/>should<sp/>be<sp/>avoided,<sp/>since<sp/>it<sp/>prevents<sp/>the<sp/>compiler<sp/>from<sp/>verifying<sp/>references<sp/>and<sp/>the<sp/>IDE<sp/>from<sp/>updating<sp/>references<sp/>during<sp/>refactorings.<sp/>It<sp/>is<sp/>permissible<sp/>to<sp/>suppress<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>error<sp/>at<sp/>a<sp/>single<sp/>documentation<sp/>site<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>cref<sp/>must<sp/>use<sp/>a<sp/>prefix<sp/>because<sp/>the<sp/>type<sp/>being<sp/>mentioned<sp/>is<sp/>not<sp/>findable<sp/>by<sp/>the<sp/>compiler.<sp/>For<sp/>example,<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>a<sp/>cref<sp/>is<sp/>mentioning<sp/>a<sp/>special<sp/>attribute<sp/>in<sp/>the<sp/>full<sp/>framework<sp/>but<sp/>you</highlight><highlight class="stringliteral">&apos;re<sp/>in<sp/>a<sp/>file<sp/>that<sp/>compiles<sp/>against<sp/>the<sp/>portable<sp/>framework,<sp/>or<sp/>if<sp/>you<sp/>want<sp/>to<sp/>reference<sp/>a<sp/>type<sp/>at<sp/>higher<sp/>layer<sp/>of<sp/>Roslyn,<sp/>you<sp/>should<sp/>suppress<sp/>the<sp/>error.<sp/>You<sp/>should<sp/>not<sp/>suppress<sp/>the<sp/>error<sp/>just<sp/>because<sp/>you<sp/>want<sp/>to<sp/>take<sp/>a<sp/>shortcut<sp/>and<sp/>avoid<sp/>using<sp/>the<sp/>full<sp/>syntax.<sp/>|</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">41<sp/>|<sp/>[CA1501](https://docs.microsoft.com/visualstudio/code-quality/ca1501-avoid-excessive-inheritance)<sp/>|<sp/>Avoid<sp/>excessive<sp/>inheritance<sp/>|<sp/>Maintainability<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>Deeply<sp/>nested<sp/>type<sp/>hierarchies<sp/>can<sp/>be<sp/>difficult<sp/>to<sp/>follow,<sp/>understand,<sp/>and<sp/>maintain.<sp/>This<sp/>rule<sp/>limits<sp/>analysis<sp/>to<sp/>hierarchies<sp/>in<sp/>the<sp/>same<sp/>module.<sp/>To<sp/>fix<sp/>a<sp/>violation<sp/>of<sp/>this<sp/>rule,<sp/>derive<sp/>the<sp/>type<sp/>from<sp/>a<sp/>base<sp/>type<sp/>that<sp/>is<sp/>less<sp/>deep<sp/>in<sp/>the<sp/>inheritance<sp/>hierarchy<sp/>or<sp/>eliminate<sp/>some<sp/>of<sp/>the<sp/>intermediate<sp/>base<sp/>types.<sp/>|</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">42<sp/>|<sp/>[CA1502](https://docs.microsoft.com/visualstudio/code-quality/ca1502-avoid-excessive-complexity)<sp/>|<sp/>Avoid<sp/>excessive<sp/>complexity<sp/>|<sp/>Maintainability<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>Cyclomatic<sp/>complexity<sp/>measures<sp/>the<sp/>number<sp/>of<sp/>linearly<sp/>independent<sp/>paths<sp/>through<sp/>the<sp/>method,<sp/>which<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>number<sp/>and<sp/>complexity<sp/>of<sp/>conditional<sp/>branches.<sp/>A<sp/>low<sp/>cyclomatic<sp/>complexity<sp/>generally<sp/>indicates<sp/>a<sp/>method<sp/>that<sp/>is<sp/>easy<sp/>to<sp/>understand,<sp/>test,<sp/>and<sp/>maintain.<sp/>The<sp/>cyclomatic<sp/>complexity<sp/>is<sp/>calculated<sp/>from<sp/>a<sp/>control<sp/>flow<sp/>graph<sp/>of<sp/>the<sp/>method<sp/>and<sp/>is<sp/>given<sp/>as<sp/>follows:<sp/>`cyclomatic<sp/>complexity<sp/>=<sp/>the<sp/>number<sp/>of<sp/>edges<sp/>-<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>+<sp/>1`,<sp/>where<sp/>a<sp/>node<sp/>represents<sp/>a<sp/>logic<sp/>branch<sp/>point<sp/>and<sp/>an<sp/>edge<sp/>represents<sp/>a<sp/>line<sp/>between<sp/>nodes.<sp/>|</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">43<sp/>|<sp/>[CA1505](https://docs.microsoft.com/visualstudio/code-quality/ca1505-avoid-unmaintainable-code)<sp/>|<sp/>Avoid<sp/>unmaintainable<sp/>code<sp/>|<sp/>Maintainability<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>The<sp/>maintainability<sp/>index<sp/>is<sp/>calculated<sp/>by<sp/>using<sp/>the<sp/>following<sp/>metrics:<sp/>lines<sp/>of<sp/>code,<sp/>program<sp/>volume,<sp/>and<sp/>cyclomatic<sp/>complexity.<sp/>Program<sp/>volume<sp/>is<sp/>a<sp/>measure<sp/>of<sp/>the<sp/>difficulty<sp/>of<sp/>understanding<sp/>of<sp/>a<sp/>symbol<sp/>that<sp/>is<sp/>based<sp/>on<sp/>the<sp/>number<sp/>of<sp/>operators<sp/>and<sp/>operands<sp/>in<sp/>the<sp/>code.<sp/>Cyclomatic<sp/>complexity<sp/>is<sp/>a<sp/>measure<sp/>of<sp/>the<sp/>structural<sp/>complexity<sp/>of<sp/>the<sp/>type<sp/>or<sp/>method.<sp/>A<sp/>low<sp/>maintainability<sp/>index<sp/>indicates<sp/>that<sp/>code<sp/>is<sp/>probably<sp/>difficult<sp/>to<sp/>maintain<sp/>and<sp/>would<sp/>be<sp/>a<sp/>good<sp/>candidate<sp/>to<sp/>redesign.<sp/>|</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral">44<sp/>|<sp/>[CA1506](https://docs.microsoft.com/visualstudio/code-quality/ca1506-avoid-excessive-class-coupling)<sp/>|<sp/>Avoid<sp/>excessive<sp/>class<sp/>coupling<sp/>|<sp/>Maintainability<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>This<sp/>rule<sp/>measures<sp/>class<sp/>coupling<sp/>by<sp/>counting<sp/>the<sp/>number<sp/>of<sp/>unique<sp/>type<sp/>references<sp/>that<sp/>a<sp/>symbol<sp/>contains.<sp/>Symbols<sp/>that<sp/>have<sp/>a<sp/>high<sp/>degree<sp/>of<sp/>class<sp/>coupling<sp/>can<sp/>be<sp/>difficult<sp/>to<sp/>maintain.<sp/>It<sp/>is<sp/>a<sp/>good<sp/>practice<sp/>to<sp/>have<sp/>types<sp/>and<sp/>methods<sp/>that<sp/>exhibit<sp/>low<sp/>coupling<sp/>and<sp/>high<sp/>cohesion.<sp/>To<sp/>fix<sp/>this<sp/>violation,<sp/>try<sp/>to<sp/>redesign<sp/>the<sp/>code<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>types<sp/>to<sp/>which<sp/>it<sp/>is<sp/>coupled.<sp/>|</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">45<sp/>|<sp/>[CA1507](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Microsoft.CodeQuality.Analyzers/Microsoft.CodeQuality.Analyzers.md#maintainability)<sp/>|<sp/>Use<sp/>nameof<sp/>to<sp/>express<sp/>symbol<sp/>names<sp/>|<sp/>Maintainability<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Using<sp/>nameof<sp/>helps<sp/>keep<sp/>your<sp/>code<sp/>valid<sp/>when<sp/>refactoring.<sp/>|</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">46<sp/>|<sp/>CA1508<sp/>|<sp/>Avoid<sp/>dead<sp/>conditional<sp/>code<sp/>|<sp/>Maintainability<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>&apos;</highlight><highlight class="normal">{0}</highlight><highlight class="stringliteral">&apos;<sp/>is<sp/>always<sp/>&apos;</highlight><highlight class="normal">{1}</highlight><highlight class="stringliteral">&apos;.<sp/>Remove<sp/>or<sp/>refactor<sp/>the<sp/>condition(s)<sp/>to<sp/>avoid<sp/>dead<sp/>code.<sp/>|</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral">47<sp/>|<sp/>CA1509<sp/>|<sp/>Invalid<sp/>entry<sp/>in<sp/>code<sp/>metrics<sp/>rule<sp/>specification<sp/>file<sp/>|<sp/>Maintainability<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>Invalid<sp/>entry<sp/>in<sp/>code<sp/>metrics<sp/>rule<sp/>specification<sp/>file<sp/>|</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">48<sp/>|<sp/>[CA1707](https://docs.microsoft.com/visualstudio/code-quality/ca1707-identifiers-should-not-contain-underscores)<sp/>|<sp/>Identifiers<sp/>should<sp/>not<sp/>contain<sp/>underscores<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>By<sp/>convention,<sp/>identifier<sp/>names<sp/>do<sp/>not<sp/>contain<sp/>the<sp/>underscore<sp/>(_)<sp/>character.<sp/>This<sp/>rule<sp/>checks<sp/>namespaces,<sp/>types,<sp/>members,<sp/>and<sp/>parameters.<sp/>|</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral">49<sp/>|<sp/>[CA1708](https://docs.microsoft.com/visualstudio/code-quality/ca1708-identifiers-should-differ-by-more-than-case)<sp/>|<sp/>Identifiers<sp/>should<sp/>differ<sp/>by<sp/>more<sp/>than<sp/>case<sp/>|<sp/>Naming<sp/>|<sp/>False<sp/>|<sp/>False<sp/>|<sp/>Identifiers<sp/>for<sp/>namespaces,<sp/>types,<sp/>members,<sp/>and<sp/>parameters<sp/>cannot<sp/>differ<sp/>only<sp/>by<sp/>case<sp/>because<sp/>languages<sp/>that<sp/>target<sp/>the<sp/>common<sp/>language<sp/>runtime<sp/>are<sp/>not<sp/>required<sp/>to<sp/>be<sp/>case-sensitive.<sp/>|</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">50<sp/>|<sp/>[CA1710](https://docs.microsoft.com/visualstudio/code-quality/ca1710-identifiers-should-have-correct-suffix)<sp/>|<sp/>Identifiers<sp/>should<sp/>have<sp/>correct<sp/>suffix<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>By<sp/>convention,<sp/>the<sp/>names<sp/>of<sp/>types<sp/>that<sp/>extend<sp/>certain<sp/>base<sp/>types<sp/>or<sp/>that<sp/>implement<sp/>certain<sp/>interfaces,<sp/>or<sp/>types<sp/>that<sp/>are<sp/>derived<sp/>from<sp/>these<sp/>types,<sp/>have<sp/>a<sp/>suffix<sp/>that<sp/>is<sp/>associated<sp/>with<sp/>the<sp/>base<sp/>type<sp/>or<sp/>interface.<sp/>|</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">51<sp/>|<sp/>[CA1711](https://docs.microsoft.com/visualstudio/code-quality/ca1711-identifiers-should-not-have-incorrect-suffix)<sp/>|<sp/>Identifiers<sp/>should<sp/>not<sp/>have<sp/>incorrect<sp/>suffix<sp/>|<sp/>Naming<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>By<sp/>convention,<sp/>only<sp/>the<sp/>names<sp/>of<sp/>types<sp/>that<sp/>extend<sp/>certain<sp/>base<sp/>types<sp/>or<sp/>that<sp/>implement<sp/>certain<sp/>interfaces,<sp/>or<sp/>types<sp/>that<sp/>are<sp/>derived<sp/>from<sp/>these<sp/>types,<sp/>should<sp/>end<sp/>with<sp/>specific<sp/>reserved<sp/>suffixes.<sp/>Other<sp/>type<sp/>names<sp/>should<sp/>not<sp/>use<sp/>these<sp/>reserved<sp/>suffixes.<sp/>|</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral">52<sp/>|<sp/>[CA1712](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1712-do-not-prefix-enum-values-with-type-name)<sp/>|<sp/>Do<sp/>not<sp/>prefix<sp/>enum<sp/>values<sp/>with<sp/>type<sp/>name<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>An<sp/>enumeration&apos;</highlight><highlight class="normal">s<sp/>values<sp/>should<sp/>not<sp/>start<sp/>with<sp/>the<sp/>type<sp/>name<sp/>of<sp/>the<sp/>enumeration.<sp/>|</highlight></codeline>
<codeline lineno="56"><highlight class="normal">53<sp/>|<sp/>[CA1714](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1714-flags-enums-should-have-plural-names)<sp/>|<sp/>Flags<sp/>enums<sp/>should<sp/>have<sp/>plural<sp/>names<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>public<sp/>enumeration<sp/>has<sp/>the<sp/>System.FlagsAttribute<sp/>attribute,<sp/>and<sp/>its<sp/>name<sp/>does<sp/>not<sp/>end<sp/>in<sp/>&quot;&quot;s&quot;&quot;.<sp/>Types<sp/>that<sp/>are<sp/>marked<sp/>by<sp/>using<sp/>FlagsAttribute<sp/>have<sp/>names<sp/>that<sp/>are<sp/>plural<sp/>because<sp/>the<sp/>attribute<sp/>indicates<sp/>that<sp/>more<sp/>than<sp/>one<sp/>value<sp/>can<sp/>be<sp/>specified.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">54<sp/>|<sp/>[CA1715](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1715-identifiers-should-have-correct-prefix)<sp/>|<sp/>Identifiers<sp/>should<sp/>have<sp/>correct<sp/>prefix<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Identifiers<sp/>should<sp/>have<sp/>correct<sp/>prefix<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">55<sp/>|<sp/>[CA1716](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1716-identifiers-should-not-match-keywords)<sp/>|<sp/>Identifiers<sp/>should<sp/>not<sp/>match<sp/>keywords<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>namespace<sp/>name<sp/>or<sp/>a<sp/>type<sp/>name<sp/>matches<sp/>a<sp/>reserved<sp/>keyword<sp/>in<sp/>a<sp/>programming<sp/>language.<sp/>Identifiers<sp/>for<sp/>namespaces<sp/>and<sp/>types<sp/>should<sp/>not<sp/>match<sp/>keywords<sp/>that<sp/>are<sp/>defined<sp/>by<sp/>languages<sp/>that<sp/>target<sp/>the<sp/>common<sp/>language<sp/>runtime.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">56<sp/>|<sp/>[CA1717](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1717-only-flagsattribute-enums-should-have-plural-names)<sp/>|<sp/>Only<sp/>FlagsAttribute<sp/>enums<sp/>should<sp/>have<sp/>plural<sp/>names<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Naming<sp/>conventions<sp/>dictate<sp/>that<sp/>a<sp/>plural<sp/>name<sp/>for<sp/>an<sp/>enumeration<sp/>indicates<sp/>that<sp/>more<sp/>than<sp/>one<sp/>value<sp/>of<sp/>the<sp/>enumeration<sp/>can<sp/>be<sp/>specified<sp/>at<sp/>the<sp/>same<sp/>time.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">57<sp/>|<sp/>[CA1720](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1720-identifiers-should-not-contain-type-names)<sp/>|<sp/>Identifier<sp/>contains<sp/>type<sp/>name<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>Names<sp/>of<sp/>parameters<sp/>and<sp/>members<sp/>are<sp/>better<sp/>used<sp/>to<sp/>communicate<sp/>their<sp/>meaning<sp/>than<sp/>to<sp/>describe<sp/>their<sp/>type,<sp/>which<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>provided<sp/>by<sp/>development<sp/>tools.<sp/>For<sp/>names<sp/>of<sp/>members,<sp/>if<sp/>a<sp/>data<sp/>type<sp/>name<sp/>must<sp/>be<sp/>used,<sp/>use<sp/>a<sp/>language-independent<sp/>name<sp/>instead<sp/>of<sp/>a<sp/>language-specific<sp/>one.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">58<sp/>|<sp/>[CA1721](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1721-property-names-should-not-match-get-methods)<sp/>|<sp/>Property<sp/>names<sp/>should<sp/>not<sp/>match<sp/>get<sp/>methods<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>The<sp/>name<sp/>of<sp/>a<sp/>public<sp/>or<sp/>protected<sp/>member<sp/>starts<sp/>with<sp/>&quot;&quot;Get&quot;&quot;<sp/>and<sp/>otherwise<sp/>matches<sp/>the<sp/>name<sp/>of<sp/>a<sp/>public<sp/>or<sp/>protected<sp/>property.<sp/>&quot;&quot;Get&quot;&quot;<sp/>methods<sp/>and<sp/>properties<sp/>should<sp/>have<sp/>names<sp/>that<sp/>clearly<sp/>distinguish<sp/>their<sp/>function.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">59<sp/>|<sp/>[CA1724](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1724-type-names-should-not-match-namespaces)<sp/>|<sp/>Type<sp/>names<sp/>should<sp/>not<sp/>match<sp/>namespaces<sp/>|<sp/>Naming<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Type<sp/>names<sp/>should<sp/>not<sp/>match<sp/>the<sp/>names<sp/>of<sp/>namespaces<sp/>that<sp/>are<sp/>defined<sp/>in<sp/>the<sp/>.NET<sp/>Framework<sp/>class<sp/>library.<sp/>Violating<sp/>this<sp/>rule<sp/>can<sp/>reduce<sp/>the<sp/>usability<sp/>of<sp/>the<sp/>library.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">60<sp/>|<sp/>[CA1725](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1725-parameter-names-should-match-base-declaration)<sp/>|<sp/>Parameter<sp/>names<sp/>should<sp/>match<sp/>base<sp/>declaration<sp/>|<sp/>Naming<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>Consistent<sp/>naming<sp/>of<sp/>parameters<sp/>in<sp/>an<sp/>override<sp/>hierarchy<sp/>increases<sp/>the<sp/>usability<sp/>of<sp/>the<sp/>method<sp/>overrides.<sp/>A<sp/>parameter<sp/>name<sp/>in<sp/>a<sp/>derived<sp/>method<sp/>that<sp/>differs<sp/>from<sp/>the<sp/>name<sp/>in<sp/>the<sp/>base<sp/>declaration<sp/>can<sp/>cause<sp/>confusion<sp/>about<sp/>whether<sp/>the<sp/>method<sp/>is<sp/>an<sp/>override<sp/>of<sp/>the<sp/>base<sp/>method<sp/>or<sp/>a<sp/>new<sp/>overload<sp/>of<sp/>the<sp/>method.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">61<sp/>|<sp/>[CA1801](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1801-review-unused-parameters)<sp/>|<sp/>Review<sp/>unused<sp/>parameters<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>method<sp/>signature<sp/>includes<sp/>a<sp/>parameter<sp/>that<sp/>is<sp/>not<sp/>used<sp/>in<sp/>the<sp/>method<sp/>body.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">62<sp/>|<sp/>[CA1802](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1802-use-literals-where-appropriate)<sp/>|<sp/>Use<sp/>literals<sp/>where<sp/>appropriate<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>field<sp/>is<sp/>declared<sp/>static<sp/>and<sp/>read-only<sp/>(Shared<sp/>and<sp/>ReadOnly<sp/>in<sp/>Visual<sp/>Basic),<sp/>and<sp/>is<sp/>initialized<sp/>by<sp/>using<sp/>a<sp/>value<sp/>that<sp/>is<sp/>computable<sp/>at<sp/>compile<sp/>time.<sp/>Because<sp/>the<sp/>value<sp/>that<sp/>is<sp/>assigned<sp/>to<sp/>the<sp/>targeted<sp/>field<sp/>is<sp/>computable<sp/>at<sp/>compile<sp/>time,<sp/>change<sp/>the<sp/>declaration<sp/>to<sp/>a<sp/>const<sp/>(Const<sp/>in<sp/>Visual<sp/>Basic)<sp/>field<sp/>so<sp/>that<sp/>the<sp/>value<sp/>is<sp/>computed<sp/>at<sp/>compile<sp/>time<sp/>instead<sp/>of<sp/>at<sp/>run?time.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">63<sp/>|<sp/>[CA1806](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1806-do-not-ignore-method-results)<sp/>|<sp/>Do<sp/>not<sp/>ignore<sp/>method<sp/>results<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>A<sp/>new<sp/>object<sp/>is<sp/>created<sp/>but<sp/>never<sp/>used;<sp/>or<sp/>a<sp/>method<sp/>that<sp/>creates<sp/>and<sp/>returns<sp/>a<sp/>new<sp/>string<sp/>is<sp/>called<sp/>and<sp/>the<sp/>new<sp/>string<sp/>is<sp/>never<sp/>used;<sp/>or<sp/>a<sp/>COM<sp/>or<sp/>P/Invoke<sp/>method<sp/>returns<sp/>an<sp/>HRESULT<sp/>or<sp/>error<sp/>code<sp/>that<sp/>is<sp/>never<sp/>used.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">64<sp/>|<sp/>[CA1812](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1812-avoid-uninstantiated-internal-classes)<sp/>|<sp/>Avoid<sp/>uninstantiated<sp/>internal<sp/>classes<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>An<sp/>instance<sp/>of<sp/>an<sp/>assembly-level<sp/>type<sp/>is<sp/>not<sp/>created<sp/>by<sp/>code<sp/>in<sp/>the<sp/>assembly.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">65<sp/>|<sp/>[CA1814](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1814-prefer-jagged-arrays-over-multidimensional)<sp/>|<sp/>Prefer<sp/>jagged<sp/>arrays<sp/>over<sp/>multidimensional<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>jagged<sp/>array<sp/>is<sp/>an<sp/>array<sp/>whose<sp/>elements<sp/>are<sp/>arrays.<sp/>The<sp/>arrays<sp/>that<sp/>make<sp/>up<sp/>the<sp/>elements<sp/>can<sp/>be<sp/>of<sp/>different<sp/>sizes,<sp/>leading<sp/>to<sp/>less<sp/>wasted<sp/>space<sp/>for<sp/>some<sp/>sets<sp/>of<sp/>data.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">66<sp/>|<sp/>[CA1815](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1815-override-equals-and-operator-equals-on-value-types)<sp/>|<sp/>Override<sp/>equals<sp/>and<sp/>operator<sp/>equals<sp/>on<sp/>value<sp/>types<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>For<sp/>value<sp/>types,<sp/>the<sp/>inherited<sp/>implementation<sp/>of<sp/>Equals<sp/>uses<sp/>the<sp/>Reflection<sp/>library<sp/>and<sp/>compares<sp/>the<sp/>contents<sp/>of<sp/>all<sp/>fields.<sp/>Reflection<sp/>is<sp/>computationally<sp/>expensive,<sp/>and<sp/>comparing<sp/>every<sp/>field<sp/>for<sp/>equality<sp/>might<sp/>be<sp/>unnecessary.<sp/>If<sp/>you<sp/>expect<sp/>users<sp/>to<sp/>compare<sp/>or<sp/>sort<sp/>instances,<sp/>or<sp/>to<sp/>use<sp/>instances<sp/>as<sp/>hash<sp/>table<sp/>keys,<sp/>your<sp/>value<sp/>type<sp/>should<sp/>implement<sp/>Equals.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">67<sp/>|<sp/>[CA1819](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1819-properties-should-not-return-arrays)<sp/>|<sp/>Properties<sp/>should<sp/>not<sp/>return<sp/>arrays<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>Arrays<sp/>that<sp/>are<sp/>returned<sp/>by<sp/>properties<sp/>are<sp/>not<sp/>write-protected,<sp/>even<sp/>when<sp/>the<sp/>property<sp/>is<sp/>read-only.<sp/>To<sp/>keep<sp/>the<sp/>array<sp/>tamper-proof,<sp/>the<sp/>property<sp/>must<sp/>return<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>array.<sp/>Typically,<sp/>users<sp/>will<sp/>not<sp/>understand<sp/>the<sp/>adverse<sp/>performance<sp/>implications<sp/>of<sp/>calling<sp/>such<sp/>a<sp/>property.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">68<sp/>|<sp/>[CA1821](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1821-remove-empty-finalizers)<sp/>|<sp/>Remove<sp/>empty<sp/>Finalizers<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Finalizers<sp/>should<sp/>be<sp/>avoided<sp/>where<sp/>possible,<sp/>to<sp/>avoid<sp/>the<sp/>additional<sp/>performance<sp/>overhead<sp/>involved<sp/>in<sp/>tracking<sp/>object<sp/>lifetime.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">69<sp/>|<sp/>[CA1822](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1822-mark-members-as-static)<sp/>|<sp/>Mark<sp/>members<sp/>as<sp/>static<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Members<sp/>that<sp/>do<sp/>not<sp/>access<sp/>instance<sp/>data<sp/>or<sp/>call<sp/>instance<sp/>methods<sp/>can<sp/>be<sp/>marked<sp/>as<sp/>static<sp/>(Shared<sp/>in<sp/>Visual<sp/>Basic).<sp/>After<sp/>you<sp/>mark<sp/>the<sp/>methods<sp/>as<sp/>static,<sp/>the<sp/>compiler<sp/>will<sp/>emit<sp/>nonvirtual<sp/>call<sp/>sites<sp/>to<sp/>these<sp/>members.<sp/>This<sp/>can<sp/>give<sp/>you<sp/>a<sp/>measurable<sp/>performance<sp/>gain<sp/>for<sp/>performance-sensitive<sp/>code.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">70<sp/>|<sp/>[CA1823](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca1823-avoid-unused-private-fields)<sp/>|<sp/>Avoid<sp/>unused<sp/>private<sp/>fields<sp/>|<sp/>Performance<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>Private<sp/>fields<sp/>were<sp/>detected<sp/>that<sp/>do<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>accessed<sp/>in<sp/>the<sp/>assembly.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">71<sp/>|<sp/>CA2007<sp/>|<sp/>Do<sp/>not<sp/>directly<sp/>await<sp/>a<sp/>Task<sp/>|<sp/>Reliability<sp/>|<sp/><ref refid="a00051_1a301aa7c866593a5b625a8fc158bbeaceaf827cf462f62848df37c5e1e94a4da74" kindref="member">True</ref><sp/>|<sp/><ref refid="a00051_1a301aa7c866593a5b625a8fc158bbeaceaf827cf462f62848df37c5e1e94a4da74" kindref="member">True</ref><sp/>|<sp/>While<sp/>authoring<sp/>a<sp/>library<sp/>where<sp/>the<sp/>consumer<sp/>is<sp/>not<sp/>known<sp/>and<sp/>when<sp/>there<sp/>is<sp/>no<sp/>need<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/>SynchronizationContext,<sp/><sp/>consider<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConfigureAwait(</highlight><highlight class="keyword">false</highlight><highlight class="normal">).<sp/>Otherwise,<sp/>the<sp/>consumers<sp/>of<sp/>the<sp/>library<sp/>may<sp/>face<sp/>deadlocks<sp/>by<sp/>consuming<sp/>the<sp/>asynchronous<sp/>methods<sp/>in<sp/>a<sp/>blocking<sp/>fashion.<sp/>|</highlight></codeline>
<codeline lineno="75"><highlight class="normal">72<sp/>|<sp/>[CA2119](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2119-seal-methods-that-satisfy-private-interfaces)<sp/>|<sp/>Seal<sp/>methods<sp/>that<sp/>satisfy<sp/>private<sp/>interfaces<sp/>|<sp/>Security<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>An<sp/>inheritable<sp/>public<sp/>type<sp/>provides<sp/>an<sp/>overridable<sp/>method<sp/>implementation<sp/>of<sp/>an<sp/>internal<sp/>(Friend<sp/>in<sp/>Visual<sp/>Basic)<sp/>interface.<sp/>To<sp/>fix<sp/>a<sp/>violation<sp/>of<sp/>this<sp/>rule,<sp/>prevent<sp/>the<sp/>method<sp/>from<sp/>being<sp/>overridden<sp/>outside<sp/>the<sp/>assembly.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">73<sp/>|<sp/>[CA2200](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details)<sp/>|<sp/>Rethrow<sp/>to<sp/>preserve<sp/>stack<sp/>details.<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>Re-throwing<sp/>caught<sp/>exception<sp/>changes<sp/>stack<sp/>information.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">74<sp/>|<sp/>[CA2211](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2211-non-constant-fields-should-not-be-visible)<sp/>|<sp/>Non-constant<sp/>fields<sp/>should<sp/>not<sp/>be<sp/>visible<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>Static<sp/>fields<sp/>that<sp/>are<sp/>neither<sp/>constants<sp/>nor<sp/>read-only<sp/>are<sp/>not<sp/>thread-safe.<sp/>Access<sp/>to<sp/>such<sp/>a<sp/>field<sp/>must<sp/>be<sp/>carefully<sp/>controlled<sp/>and<sp/>requires<sp/>advanced<sp/>programming<sp/>techniques<sp/>to<sp/>synchronize<sp/>access<sp/>to<sp/>the<sp/>class<sp/>object.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">75<sp/>|<sp/>[CA2214](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2214-do-not-call-overridable-methods-in-constructors)<sp/>|<sp/>Do<sp/>not<sp/>call<sp/>overridable<sp/>methods<sp/>in<sp/>constructors<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>Virtual<sp/>methods<sp/>defined<sp/>on<sp/>the<sp/>class<sp/>should<sp/>not<sp/>be<sp/>called<sp/>from<sp/>constructors.<sp/>If<sp/>a<sp/>derived<sp/>class<sp/>has<sp/>overridden<sp/>the<sp/>method,<sp/>the<sp/>derived<sp/>class<sp/>version<sp/>will<sp/>be<sp/>called<sp/>(before<sp/>the<sp/>derived<sp/>class<sp/>constructor<sp/>is<sp/>called).<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">76<sp/>|<sp/>[CA2217](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2217-do-not-mark-enums-with-flagsattribute)<sp/>|<sp/>Do<sp/>not<sp/>mark<sp/>enums<sp/>with<sp/>FlagsAttribute<sp/>|<sp/>Usage<sp/>|<sp/>False<sp/>|<sp/>True<sp/>|<sp/>An<sp/>externally<sp/>visible<sp/>enumeration<sp/>is<sp/>marked<sp/>by<sp/>using<sp/>FlagsAttribute,<sp/>and<sp/>it<sp/>has<sp/>one<sp/>or<sp/>more<sp/>values<sp/>that<sp/>are<sp/>not<sp/>powers<sp/>of<sp/>two<sp/>or<sp/>a<sp/>combination<sp/>of<sp/>the<sp/>other<sp/>defined<sp/>values<sp/>on<sp/>the<sp/>enumeration.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">77<sp/>|<sp/>[CA2218](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2218-override-gethashcode-on-overriding-equals)<sp/>|<sp/>Override<sp/>GetHashCode<sp/>on<sp/>overriding<sp/>Equals<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>GetHashCode<sp/>returns<sp/>a<sp/>value,<sp/>based<sp/>on<sp/>the<sp/>current<sp/>instance,<sp/>that<sp/>is<sp/>suited<sp/>for<sp/>hashing<sp/>algorithms<sp/>and<sp/>data<sp/>structures<sp/>such<sp/>as<sp/>a<sp/>hash<sp/>table.<sp/>Two<sp/>objects<sp/>that<sp/>are<sp/>the<sp/>same<sp/>type<sp/>and<sp/>are<sp/>equal<sp/>must<sp/>return<sp/>the<sp/>same<sp/>hash<sp/>code.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">78<sp/>|<sp/>[CA2219](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2219-do-not-raise-exceptions-in-exception-clauses)<sp/>|<sp/>Do<sp/>not<sp/>raise<sp/>exceptions<sp/>in<sp/>finally<sp/>clauses<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>When<sp/>an<sp/>exception<sp/>is<sp/>raised<sp/>in<sp/>a<sp/>finally<sp/>clause,<sp/>the<sp/>new<sp/>exception<sp/>hides<sp/>the<sp/>active<sp/>exception.<sp/>This<sp/>makes<sp/>the<sp/>original<sp/>error<sp/>difficult<sp/>to<sp/>detect<sp/>and<sp/>debug.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">79<sp/>|<sp/>[CA2224](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2224-override-equals-on-overloading-operator-equals)<sp/>|<sp/>Override<sp/>Equals<sp/>on<sp/>overloading<sp/>operator<sp/>equals<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>public<sp/>type<sp/>implements<sp/>the<sp/>equality<sp/>operator<sp/>but<sp/>does<sp/>not<sp/>override<sp/>Object.Equals.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">80<sp/>|<sp/>[CA2225](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2225-operator-overloads-have-named-alternates)<sp/>|<sp/>Operator<sp/>overloads<sp/>have<sp/>named<sp/>alternates<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>An<sp/>operator<sp/>overload<sp/>was<sp/>detected,<sp/>and<sp/>the<sp/>expected<sp/>named<sp/>alternative<sp/>method<sp/>was<sp/>not<sp/>found.<sp/>The<sp/>named<sp/>alternative<sp/>member<sp/>provides<sp/>access<sp/>to<sp/>the<sp/>same<sp/>functionality<sp/>as<sp/>the<sp/>operator<sp/>and<sp/>is<sp/>provided<sp/>for<sp/>developers<sp/>who<sp/>program<sp/>in<sp/>languages<sp/>that<sp/>do<sp/>not<sp/>support<sp/>overloaded<sp/>operators.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">81<sp/>|<sp/>[CA2226](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2226-operators-should-have-symmetrical-overloads)<sp/>|<sp/>Operators<sp/>should<sp/>have<sp/>symmetrical<sp/>overloads<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>A<sp/>type<sp/>implements<sp/>the<sp/>equality<sp/>or<sp/>inequality<sp/>operator<sp/>and<sp/>does<sp/>not<sp/>implement<sp/>the<sp/>opposite<sp/>operator.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">82<sp/>|<sp/>[CA2227](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2227-collection-properties-should-be-read-only)<sp/>|<sp/>Collection<sp/>properties<sp/>should<sp/>be<sp/>read<sp/>only<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>A<sp/>writable<sp/>collection<sp/>property<sp/>allows<sp/>a<sp/>user<sp/>to<sp/>replace<sp/>the<sp/>collection<sp/>with<sp/>a<sp/>different<sp/>collection.<sp/>A<sp/>read-only<sp/>property<sp/>stops<sp/>the<sp/>collection<sp/>from<sp/>being<sp/>replaced<sp/>but<sp/>still<sp/>allows<sp/>the<sp/>individual<sp/>members<sp/>to<sp/>be<sp/>set.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">83<sp/>|<sp/>[CA2231](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2231-overload-operator-equals-on-overriding-valuetype-equals)<sp/>|<sp/>Overload<sp/>operator<sp/>equals<sp/>on<sp/>overriding<sp/>value<sp/>type<sp/>Equals<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>True<sp/>|<sp/>In<sp/>most<sp/>programming<sp/>languages<sp/>there<sp/>is<sp/>no<sp/>default<sp/>implementation<sp/>of<sp/>the<sp/>equality<sp/>operator<sp/>(==)<sp/>for<sp/>value<sp/>types.<sp/>If<sp/>your<sp/>programming<sp/>language<sp/>supports<sp/>operator<sp/>overloads,<sp/>you<sp/>should<sp/>consider<sp/>implementing<sp/>the<sp/>equality<sp/>operator.<sp/>Its<sp/>behavior<sp/>should<sp/>be<sp/>identical<sp/>to<sp/>that<sp/>of<sp/>Equals<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">84<sp/>|<sp/>[CA2234](https:</highlight><highlight class="comment">//docs.microsoft.com/visualstudio/code-quality/ca2234-pass-system-uri-objects-instead-of-strings)<sp/>|<sp/>Pass<sp/>system<sp/>uri<sp/>objects<sp/>instead<sp/>of<sp/>strings<sp/>|<sp/>Usage<sp/>|<sp/>True<sp/>|<sp/>False<sp/>|<sp/>A<sp/>call<sp/>is<sp/>made<sp/>to<sp/>a<sp/>method<sp/>that<sp/>has<sp/>a<sp/>string<sp/>parameter<sp/>whose<sp/>name<sp/>contains<sp/>&quot;uri&quot;,<sp/>&quot;URI&quot;,<sp/>&quot;urn&quot;,<sp/>&quot;URN&quot;,<sp/>&quot;url&quot;,<sp/>or<sp/>&quot;URL&quot;.<sp/>The<sp/>declaring<sp/>type<sp/>of<sp/>the<sp/>method<sp/>contains<sp/>a<sp/>corresponding<sp/>method<sp/>overload<sp/>that<sp/>has<sp/>a<sp/>System.Uri<sp/>parameter.<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">85<sp/>|<sp/>CA2244<sp/>|<sp/>Do<sp/>not<sp/>duplicate<sp/>indexed<sp/>element<sp/>initializations<sp/>|<sp/>Usage<sp/>|<sp/><ref refid="a00051_1a301aa7c866593a5b625a8fc158bbeaceaf827cf462f62848df37c5e1e94a4da74" kindref="member">True</ref><sp/>|<sp/><ref refid="a00051_1a301aa7c866593a5b625a8fc158bbeaceaf8320b26d30ab433c5a54546d21f414c" kindref="member">False</ref><sp/>|<sp/>Indexed<sp/>elements<sp/>in<sp/>objects<sp/>initializers<sp/>must<sp/>initialize<sp/>unique<sp/>elements.<sp/>A<sp/>duplicate<sp/>index<sp/>might<sp/>overwrite<sp/>a<sp/>previous<sp/>element<sp/>initialization.<sp/>|</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/thesecretlab/YarnSpinner/packages/Microsoft.CodeQuality.Analyzers.2.9.1/documentation/Microsoft.CodeQuality.Analyzers.md"/>
  </compounddef>
</doxygen>
