<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="df/d86/a00012" kind="page">
    <compoundname>md_Documentation_Unity</compoundname>
    <title>Using Yarn Spinner in your Unity game</title>
    <detaileddescription>
<para><heading level="2"><ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner Quick Start</heading>
</para><para>Here&apos;s how to quickly jump in to <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner, if you&apos;re already reasonably comfortable with Unity.</para><para><itemizedlist>
<listitem><para><bold>Download and import <ulink url="https://github.com/thesecretlab/YarnSpinner/releases">the YarnSpinner package</ulink> into your project.</bold></para></listitem><listitem><para><bold>Inside the <ref refid="d2/d34/a00156" kindref="compound">YarnSpinner</ref> folder, open the <computeroutput>Examples/Yarn Spinner Basic Example</computeroutput> scene.</bold></para></listitem><listitem><para><bold>Start the game. Play through the dialogue.</bold></para></listitem></itemizedlist>
</para><para>Once you&apos;ve played with it, open the Example Script file in the <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> editor (it&apos;s in the <computeroutput>Examples/Demo Assets</computeroutput> folder), and make some changes to the script. Once you&apos;ve done that, take a look at how <computeroutput><ref refid="d3/d32/a00105" kindref="compound">Code/DialogueRunner.cs</ref></computeroutput>, <computeroutput>Examples/Demo <ref refid="dd/d42/a00109" kindref="compound">Scripts/ExampleDialogueUI.cs</ref></computeroutput> and <computeroutput>Examples/Demo <ref refid="d4/d81/a00110" kindref="compound">Scripts/ExampleVariableStorage.cs</ref></computeroutput> work. You can also <ref refid="d1/d84/a00097" kindref="compound">add your own functions to Yarn</ref>.</para><para><heading level="2">Tutorial</heading>
</para><para><blockquote><para>***Note:*** This tutorial assumes that you know at least a little bit about <ulink url="http://www.unity3d.com">Unity</ulink>. In particular, it assumes that you know how to get around the Unity editor, how to work with game objects, and how to write scripts in C#. If you don&apos;t know these things, check out <ulink url="http://unity3d.com/learn">Unity&apos;s documentation</ulink>!</para><para></para></blockquote></para><para><ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner is designed to be easy to work with in Unity. It makes no assumptions about how your game presents dialogue to the player, or about how the player chooses their responses.</para><para>To use <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner, you use three classes:</para><para><itemizedlist>
<listitem><para><computeroutput>DialogueRunner</computeroutput>, which is responsible for loading and running your dialogue script;</para></listitem><listitem><para>A subclass of <computeroutput>DialogueUIBehaviour</computeroutput>, which is reponsible for displaying the lines and dialogue choices to the player; and</para></listitem><listitem><para>A subclass of <computeroutput>VariableStorageBehaviour</computeroutput>, which is responsible for storing the state of the conversation.</para></listitem></itemizedlist>
</para><para>These three classes exist in the <computeroutput><ref refid="d3/d65/a00154" kindref="compound">Yarn.Unity</ref></computeroutput> namespace. To create your subclasses of <computeroutput>DialogueUIBehaviour</computeroutput> and <computeroutput>VariableStorageBehaviour</computeroutput>, you&apos;ll need to add the following code to the top of your C# code: <verbatim>using Yarn.Unity;
</verbatim></para><para>Additionally, you store your <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> files as <computeroutput>.json</computeroutput> assets in your Unity projects. These can be stored anywhere - you simply provide add them to the <computeroutput>DialogueRunner</computeroutput>&apos;s inspector. You can also call <computeroutput>AddScript</computeroutput> on the <computeroutput>DialogueRunner</computeroutput> at runtime; this is useful for cases like spawning a character who comes with some extra dialogue - all that needs to happen is that character just needs to pass their <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> script to the <computeroutput>DialogueRunner</computeroutput>.</para><para><heading level="3">Load your conversation with <computeroutput>DialogueRunner</computeroutput></heading>
</para><para><ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> conversations are loaded and managed by a <computeroutput>DialogueRunner</computeroutput> object. This object is responsible for loading and parsing your <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> <computeroutput>.json</computeroutput> files. It also runs the script when it&apos;s told to - for example, when you walk up to a character in your game and talk to them.</para><para><heading level="3">Display your conversation with <computeroutput>DialogueUI</computeroutput></heading>
</para><para>Your game&apos;s dialogue needs to be shown to the user. Additionally, you need a way to let the player choose what their reaction is going to be.</para><para><ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner makes no assumptions about how you want to handle your dialogue&apos;s UI. Want to present as simple list of options? That&apos;s fine. Want a fancy Mass Effect style radial menu? Totally cool. Want a totally bonkers gesture-based UI with a countdown timer? Oh man that would be sweet.</para><para><ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner leaves all of the work of actually presenting the conversation up to you; all it&apos;s responsible for is delivering the lines that the player should see, and notifying <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner about what response the user selected.</para><para><ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner comes with an example script that uses Unity&apos;s UI system. It&apos;s a good place to start.</para><para><heading level="3">Store your conversation state with a <computeroutput>VariableStorageBehaviour</computeroutput></heading>
</para><para>There&apos;s one last necessary component. As you play through a conversation, you&apos;ll probably want to record the user&apos;s choices somewhere. <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> Spinner doesn&apos;t care about the details of how you save your game state; instead, it just expects you to give it an object that conforms to a C# *<ulink url="C# interface">interface</ulink>*, which defines methods like &quot;set variable&quot; and &quot;get value of variable&quot;.</para><para>The simplest implementation of this is one that just keeps your variables in memory, but it&apos;s pretty straightforward to adapt an existing save game system to use it.</para><para><heading level="3">Respond to commands with <computeroutput>YarnCommand</computeroutput></heading>
</para><para>In <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref>, you can create <emphasis>commands</emphasis> that tell your game to do something. For example, if you want a character to move to a certain point on the screen, you might have a command that looks like this: <verbatim>&lt;&lt;move Sally exit&gt;&gt;
</verbatim></para><para>For this to work, the game object named &quot;Sally&quot; needs to have a script component attached to it, and one of those scripts needs to have a method that looks like this: <verbatim>[YarnCommand(&quot;move&quot;)]
public void MoveCharacter(string destinationName) {
    // move to the destination
}
</verbatim></para><para>When <ref refid="d6/d5b/a00026" kindref="compound">Yarn</ref> encounters a command that contains two or more words, it looks for a game object with the same name as the second word (&quot;Sally&quot;, in the above example), and then searches that object&apos;s scripts for any method that has a <computeroutput>YarnCommand</computeroutput> with the same name as the first word (in this case, &quot;move&quot;).</para><para>Any further words in the command are passed as string parameters to the method (&quot;exit&quot;, in this case, which is used as the <computeroutput>destinationName</computeroutput> parameter)</para><para>Note that <bold>all</bold> parameters must be strings. <computeroutput>DialogueRunner</computeroutput> will throw an error if it finds a method that has parameters of any other type. It&apos;s up to your method to convert the strings into other types, like numbers. </para>    </detaileddescription>
  </compounddef>
</doxygen>
