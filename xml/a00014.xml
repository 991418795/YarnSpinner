<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="a00014" kind="page">
    <compoundname>md_Documentation_YarnSpinner-Dialogue_General-Usage</compoundname>
    <title>Yarn Dialogue - General Usage Guide</title>
    <detaileddescription>
<para>This document talks about how to use <ref refid="a00053" kindref="compound">Yarn</ref> if you&apos;re using it to write content. It doesn&apos;t talk about how to integrate <ref refid="a00053" kindref="compound">Yarn</ref> Spinner into your project; for that, see <ulink url="../YarnSpinner-Unity">&quot;Using Yarn Spinner in your Unity game&quot;</ulink>.</para><para><heading level="2">Lines</heading>
</para><para><ref refid="a00053" kindref="compound">Yarn</ref> lets you define multiple chunks of dialogue that are linked together. Each chunk is called a <emphasis>node</emphasis>.</para><para>Nodes are filled with different kinds of text. The simplest is lines of dialogue, which look like this: ``` Alice: Hey, I&apos;m a character speaking in a dialogue! Bob: Wild! ``` Each line is delivered to your game one at a time.</para><para><heading level="2">Options</heading>
</para><para>To link a node to another node, you provide <emphasis>options</emphasis>. Options look like this: ``` [[Go to the woods|GoToWoods]] [[Go back to the city|GoToCity]] ``<computeroutput> Options have two parts: the label, which is shown to the user, and the name of the node that we should link to when the user selects the option. The label and the node name are separated by a vertical bar (</computeroutput>|`).</para><para>You don&apos;t have to provide the label. Instead, you can just provide the node name, like so: ``` [[GoToCity]] ``` If an option has no label, <ref refid="a00053" kindref="compound">Yarn</ref> will automatically jump to that node when that line is run, and it won&apos;t show options to the player.</para><para>When all of the lines in a node have been displayed, the dialogue system gives your game the list of available options. You then let the user choose an option, and then continue loading lines of dialogue, one at a time.</para><para>If there are no options when we reach the end of a node, then we&apos;ve reached the end of a conversation, and <ref refid="a00053" kindref="compound">Yarn</ref> Spinner will let your game know.</para><para><heading level="2">Shortcut Options</heading>
</para><para>Sometimes, you&apos;ll want to add little branches to your conversation, but you don&apos;t want to create separate nodes for them. Instead, you can use <emphasis>shortcut options</emphasis>: ``` Mae: What did you say to her? -&gt; Nothing. Mae: Oh, man. Maybe you should have. -&gt; That she was an idiot. Mae: Hah! I bet that pissed her off. Mae: Anyway, I&apos;d better get going. ``` When this is run, <ref refid="a00053" kindref="compound">Yarn</ref> Spinner will behave just as if you&apos;d broken all of this up into multiple nodes.</para><para>You can also attach conditions to shortcut options, which will make them only appear if a certain condition passes: ``` Bob: What would you like? -&gt; A burger. &lt;&lt;if $money &gt;= 5&gt;&gt; Bob: Nice. Enjoy! -&gt; A soda. &lt;&lt;if $money &gt;= 2&gt;&gt; Bob: Yum! -&gt; Nothing. Bob: Thanks for coming! ``` Note that in the last example, there wasn&apos;t any attached text. If the player selected the last option (&quot;Nothing.&quot;), then the next line to appear would be &quot;Bob: Thanks for coming!&quot;</para><para>You can also nest these shortcut options, if you like. Be careful, though - too much nested options can make your text difficult to read.</para><para><heading level="2">Commands</heading>
</para><para>In addition to showing lines of dialogue, your game will probably want to run actions - things like &quot;move the camera to position X&quot;, or &quot;make character start smiling&quot;. You can use commands for this.</para><para>Commands look like this: ``` &lt;&lt;move alice=&quot;&quot; to=&quot;&quot; under_bridge&gt;=&quot;&quot;&gt;&gt; ``` Any text inside the double-chevrons will be sent directly to your game as a string. It&apos;s up to you to decide what to do with that string.</para><para><ref refid="a00053" kindref="compound">Yarn</ref> has a special command, called <computeroutput>stop</computeroutput>. If you include <computeroutput>&lt;&lt;stop&gt;&gt;</computeroutput> in your node, <ref refid="a00053" kindref="compound">Yarn</ref> will stop the entire conversation when it reaches it.</para><para><heading level="2">Variables and If statements</heading>
</para><para>You can store numbers in variables. To do this, use the <computeroutput>set</computeroutput> command: ``` &lt;&lt;set $door_unlocked to 1&gt;&gt; ``<computeroutput> You can check the value of a variable using the</computeroutput>if<computeroutput>command: </computeroutput>`` &lt;&lt;if $door_unlocked is 1&gt;&gt; The door is unlocked! (This will only appear if $door_unlocked is equal to 1.) &lt;&lt;endif&gt;&gt; ``` <heading level="2">Expressions</heading>
</para><para>Maths is easy in <ref refid="a00053" kindref="compound">Yarn</ref>. ``` &lt;&lt; set $number_of_stars_collected = 1 &gt;&gt; &lt;&lt; set $number_of_stars_collected = $number_of_stars_collected + 1 &gt;&gt; ``` <blockquote><para>***Note:*** <computeroutput>to</computeroutput> and <computeroutput>=</computeroutput> are synonyms. It is up to you which you use. However it is strongly recommended to maintain consistency through your Dialogue for readability purposes. At the end of this document, you will find a <ulink url="#operator-synonyms">list of operator synonyms</ulink>.</para><para></para></blockquote></para><para><ulink url="https://en.wikipedia.org/wiki/Order_of_operations">Order of operations</ulink> is as expected, but usage of brackets is encouraged for readability purposes. ``` &lt;&lt; set $globular_clusters_collected = 2 &gt;&gt; &lt;&lt; set $number_of_stars_collected = $number_of_stars_collected + ( $globular_clusters_collected * 1000 ) &gt;&gt; ``<computeroutput> You can also do maths inside an</computeroutput>if<computeroutput>command. For example: </computeroutput>`` &lt;&lt;if $number_of_stars_collected &gt; 5&gt;&gt; You have more than 5 stars! &lt;&lt;endif&gt;&gt; ``` You can also get fancier, and do stuff like this: ``` &lt;&lt;if $hostages_saved == $number_of_hostages and $time_remaining &gt; 0&gt;&gt; You win the game! &lt;&lt;elseif $hostages_saved &lt; $number_of_hostages and $time_remaining &gt; 0&gt;&gt; You need to rescue more hostages! &lt;&lt;elseif $bomb_has_exploded == 0&gt;&gt; You failed to rescue the hostages before time ran out! &lt;&lt;endif&gt;&gt; ``` <heading level="2">Types</heading>
</para><para>There are four different types of value in <ref refid="a00053" kindref="compound">Yarn</ref>: strings, numbers, <ulink url="http://eesemi.com/boolean.htm">booleans</ulink>, and <computeroutput>null</computeroutput>.</para><para><itemizedlist>
<listitem><para>Strings contain text.</para></listitem><listitem><para>Numbers are floating-point numbers.</para></listitem><listitem><para>Booleans are either true or false.</para></listitem><listitem><para><computeroutput>null</computeroutput> means no value.</para></listitem></itemizedlist>
</para><para><ref refid="a00053" kindref="compound">Yarn</ref> will automatically convert between types for you. For example: ``` &lt;&lt;if &quot;hi&quot; == &quot;hi&quot;&gt;&gt; The two strings are the same! &lt;&lt;endif&gt;&gt;</para><para>&lt;&lt;if 1+1+&quot;hi&quot; == &quot;2hi&quot;&gt;&gt; Strings get joined together with other values! &lt;&lt;endif&gt;&gt; ```</para><para><heading level="2">Functions</heading>
</para><para>You can call functions in your <computeroutput>if</computeroutput> commands. For example, <ref refid="a00053" kindref="compound">Yarn</ref> Spinner provides a function called <computeroutput>visited</computeroutput>, which you can use to find out if a node has been entered before or not. It takes a single parameter (which is a string), and returns true or false depending on whether or not the node you specified has been entered. ``` &lt;&lt;if visited(&quot;GoToCity&quot;)&gt;&gt; We have gone to the city before! &lt;&lt;endif&gt;&gt; ``` You can&apos;t define your own functions inside <ref refid="a00053" kindref="compound">Yarn</ref> itself, but they can be added at run-time. See ../YarnSpinner-Programming/Extending.md &quot;&quot;Extending <ref refid="a00053" kindref="compound">Yarn</ref> Spinner&quot;&quot; for more info.</para><para><heading level="2">Operator synonyms</heading>
</para><para><heading level="3">Assignment</heading>
</para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>word </para></entry><entry thead="yes"><para>symbol  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>to</computeroutput> </para></entry><entry thead="no"><para><computeroutput>=</computeroutput> </para></entry></row>
</table>
<heading level="3">Comparison</heading>
</para><para><table rows="11" cols="2"><row>
<entry thead="yes"><para>word </para></entry><entry thead="yes"><para>symbol  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>and</computeroutput> </para></entry><entry thead="no"><para><computeroutput>&amp;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>le</computeroutput> </para></entry><entry thead="no"><para><computeroutput>&lt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>gt</computeroutput> </para></entry><entry thead="no"><para><computeroutput>&gt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>or</computeroutput> </para></entry><entry thead="no"><para><computeroutput>\|\|</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>leq</computeroutput> </para></entry><entry thead="no"><para><computeroutput>&lt;=</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>geq</computeroutput> </para></entry><entry thead="no"><para><computeroutput>&gt;=</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>eq</computeroutput> </para></entry><entry thead="no"><para><computeroutput>==</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>is</computeroutput> </para></entry><entry thead="no"><para><computeroutput>==</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>neq</computeroutput> </para></entry><entry thead="no"><para><computeroutput>!=</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>not</computeroutput> </para></entry><entry thead="no"><para><computeroutput>!</computeroutput> </para></entry></row>
</table>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
