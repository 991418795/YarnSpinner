<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="a00034" kind="page">
    <compoundname>md_packages_Microsoft.NetCore.Analyzers.2.9.1_documentation_Microsoft.NetCore.Analyzers</compoundname>
    <title>Microsoft</title>
    <detaileddescription>
<para><table rows="66" cols="7"><row>
<entry thead="yes"><para>Sr. No. </para></entry><entry thead="yes"><para>Rule ID </para></entry><entry thead="yes"><para>Title </para></entry><entry thead="yes"><para>Category </para></entry><entry thead="yes"><para>Enabled </para></entry><entry thead="yes"><para>CodeFix </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para>1 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1303-do-not-pass-literals-as-localized-parameters">CA1303</ulink> </para></entry><entry thead="no"><para>Do not pass literals as localized parameters </para></entry><entry thead="no"><para>Globalization </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>A method passes a string literal as a parameter to a constructor or method in the .NET Framework class library and that string should be localizable. To fix a violation of this rule, replace the string literal with a string retrieved through an instance of the ResourceManager class. </para></entry></row>
<row>
<entry thead="no"><para>2 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1304-specify-cultureinfo">CA1304</ulink> </para></entry><entry thead="no"><para>Specify CultureInfo </para></entry><entry thead="no"><para>Globalization </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A method or constructor calls a member that has an overload that accepts a System.Globalization.CultureInfo parameter, and the method or constructor does not call the overload that takes the CultureInfo parameter. When a CultureInfo or System.IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be displayed to the user, specify &apos;CultureInfo.CurrentCulture&apos; as the &apos;CultureInfo&apos; parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify &apos;CultureInfo.InvariantCulture&apos;. </para></entry></row>
<row>
<entry thead="no"><para>3 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1305-specify-iformatprovider">CA1305</ulink> </para></entry><entry thead="no"><para>Specify IFormatProvider </para></entry><entry thead="no"><para>Globalization </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be based on the input from/output displayed to the user, specify &apos;CultureInfo.CurrentCulture&apos; as the &apos;IFormatProvider&apos;. Otherwise, if the result will be stored and accessed by software, such as when it is loaded from disk/database and when it is persisted to disk/database, specify &apos;CultureInfo.InvariantCulture&apos; </para></entry></row>
<row>
<entry thead="no"><para>4 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1307-specify-stringcomparison">CA1307</ulink> </para></entry><entry thead="no"><para>Specify StringComparison </para></entry><entry thead="no"><para>Globalization </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A string comparison operation uses a method overload that does not set a StringComparison parameter. If the result will be displayed to the user, such as when sorting a list of items for display in a list box, specify &apos;StringComparison.CurrentCulture&apos; or &apos;StringComparison.CurrentCultureIgnoreCase&apos; as the &apos;StringComparison&apos; parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify &apos;StringComparison.OrdinalIgnoreCase&apos;. Otherwise, if comparing case-sensitive identifiers, specify &apos;StringComparison.Ordinal&apos;. </para></entry></row>
<row>
<entry thead="no"><para>5 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1308-normalize-strings-to-uppercase">CA1308</ulink> </para></entry><entry thead="no"><para>Normalize strings to uppercase </para></entry><entry thead="no"><para>Globalization </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>Strings should be normalized to uppercase. A small group of characters cannot make a round trip when they are converted to lowercase. To make a round trip means to convert the characters from one locale to another locale that represents character data differently, and then to accurately retrieve the original characters from the converted characters. </para></entry></row>
<row>
<entry thead="no"><para>6 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1309-use-ordinal-stringcomparison">CA1309</ulink> </para></entry><entry thead="no"><para>Use ordinal stringcomparison </para></entry><entry thead="no"><para>Globalization </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase. By explicitly setting the parameter to either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, becomes more correct, and becomes more reliable. </para></entry></row>
<row>
<entry thead="no"><para>7 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1401-p-invokes-should-not-be-visible">CA1401</ulink> </para></entry><entry thead="no"><para>P/Invokes should not be visible </para></entry><entry thead="no"><para>Interoperability </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic). Such methods should not be exposed. </para></entry></row>
<row>
<entry thead="no"><para>8 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1810-initialize-reference-type-static-fields-inline">CA1810</ulink> </para></entry><entry thead="no"><para>Initialize reference type static fields inline </para></entry><entry thead="no"><para>Performance </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A reference type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor. </para></entry></row>
<row>
<entry thead="no"><para>9 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1813-avoid-unsealed-attributes">CA1813</ulink> </para></entry><entry thead="no"><para>Avoid unsealed attributes </para></entry><entry thead="no"><para>Performance </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy. Sealing the attribute eliminates the search through the inheritance hierarchy and can improve performance. </para></entry></row>
<row>
<entry thead="no"><para>10 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1816-call-gc-suppressfinalize-correctly">CA1816</ulink> </para></entry><entry thead="no"><para>Dispose methods should call SuppressFinalize </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual?Basic). </para></entry></row>
<row>
<entry thead="no"><para>11 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1820-test-for-empty-strings-using-string-length">CA1820</ulink> </para></entry><entry thead="no"><para>Test for empty strings using string length </para></entry><entry thead="no"><para>Performance </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>Comparing strings by using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals. </para></entry></row>
<row>
<entry thead="no"><para>12 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca1824-mark-assemblies-with-neutralresourceslanguageattribute">CA1824</ulink> </para></entry><entry thead="no"><para>Mark assemblies with NeutralResourcesLanguageAttribute </para></entry><entry thead="no"><para>Performance </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of a neutral culture for an assembly. This improves lookup performance for the first resource that you load and can reduce your working set. </para></entry></row>
<row>
<entry thead="no"><para>13 </para></entry><entry thead="no"><para>CA1825 </para></entry><entry thead="no"><para>Avoid zero-length array allocations. </para></entry><entry thead="no"><para>Performance </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>Avoid unnecessary zero-length array allocations. Use {0} instead. </para></entry></row>
<row>
<entry thead="no"><para>14 </para></entry><entry thead="no"><para>CA1826 </para></entry><entry thead="no"><para>Do not use Enumerable methods on indexable collections. Instead use the collection directly </para></entry><entry thead="no"><para>Performance </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>This collection is directly indexable. Going through LINQ here causes unnecessary allocations and CPU work. </para></entry></row>
<row>
<entry thead="no"><para>15 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2000-dispose-objects-before-losing-scope">CA2000</ulink> </para></entry><entry thead="no"><para>Dispose objects before losing scope </para></entry><entry thead="no"><para>Reliability </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead. </para></entry></row>
<row>
<entry thead="no"><para>16 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2002-do-not-lock-on-objects-with-weak-identity">CA2002</ulink> </para></entry><entry thead="no"><para>Do not lock on objects with weak identity </para></entry><entry thead="no"><para>Reliability </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object. </para></entry></row>
<row>
<entry thead="no"><para>17 </para></entry><entry thead="no"><para>CA2008 </para></entry><entry thead="no"><para>Do not create tasks without passing a TaskScheduler </para></entry><entry thead="no"><para>Reliability </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>Do not create tasks unless you are using one of the overloads that takes a TaskScheduler. The default is to schedule on TaskScheduler.Current, which would lead to deadlocks. Either use TaskScheduler.Default to schedule on the thread pool, or explicitly pass TaskScheduler.Current to make your intentions clear. </para></entry></row>
<row>
<entry thead="no"><para>18 </para></entry><entry thead="no"><para>CA2009 </para></entry><entry thead="no"><para>Do not call ToImmutableCollection on an ImmutableCollection value </para></entry><entry thead="no"><para>Reliability </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>Do not call {0} on an {1} value </para></entry></row>
<row>
<entry thead="no"><para>19 </para></entry><entry thead="no"><para>CA2010 </para></entry><entry thead="no"><para>Always consume the value returned by methods marked with PreserveSigAttribute </para></entry><entry thead="no"><para>Reliability </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>PreserveSigAttribute indicates that a method will return an HRESULT, rather than throwing an exception. Therefore, it is important to consume the HRESULT returned by the method, so that errors can be detected. Generally, this is done by calling Marshal.ThrowExceptionForHR. </para></entry></row>
<row>
<entry thead="no"><para>20 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2100-review-sql-queries-for-security-vulnerabilities">CA2100</ulink> </para></entry><entry thead="no"><para>Review SQL queries for security vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>SQL queries that directly use user input can be vulnerable to SQL injection attacks. Review this SQL query for potential vulnerabilities, and consider using a parameterized SQL query. </para></entry></row>
<row>
<entry thead="no"><para>21 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2101-specify-marshaling-for-p-invoke-string-arguments">CA2101</ulink> </para></entry><entry thead="no"><para>Specify marshaling for P/Invoke string arguments </para></entry><entry thead="no"><para>Globalization </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability. </para></entry></row>
<row>
<entry thead="no"><para>22 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2201-do-not-raise-reserved-exception-types">CA2201</ulink> </para></entry><entry thead="no"><para>Do not raise reserved exception types </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>An exception of type that is not sufficiently specific or reserved by the runtime should never be raised by user code. This makes the original error difficult to detect and debug. If this exception instance might be thrown, use a different exception type. </para></entry></row>
<row>
<entry thead="no"><para>23 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2207-initialize-value-type-static-fields-inline">CA2207</ulink> </para></entry><entry thead="no"><para>Initialize value type static fields inline </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A value type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor. </para></entry></row>
<row>
<entry thead="no"><para>24 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2208-instantiate-argument-exceptions-correctly">CA2208</ulink> </para></entry><entry thead="no"><para>Instantiate argument exceptions correctly </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException. </para></entry></row>
<row>
<entry thead="no"><para>25 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2213-disposable-fields-should-be-disposed">CA2213</ulink> </para></entry><entry thead="no"><para>Disposable fields should be disposed </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>A type that implements System.IDisposable declares fields that are of types that also implement IDisposable. The Dispose method of the field is not called by the Dispose method of the declaring type. To fix a violation of this rule, call Dispose on fields that are of types that implement IDisposable if you are responsible for allocating and releasing the unmanaged resources held by the field. </para></entry></row>
<row>
<entry thead="no"><para>26 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2216-disposable-types-should-declare-finalizer">CA2216</ulink> </para></entry><entry thead="no"><para>Disposable types should declare finalizer </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>A type that implements System.IDisposable and has fields that suggest the use of unmanaged resources does not implement a finalizer, as described by Object.Finalize. </para></entry></row>
<row>
<entry thead="no"><para>27 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2229-implement-serialization-constructors">CA2229</ulink> </para></entry><entry thead="no"><para>Implement serialization constructors </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected. </para></entry></row>
<row>
<entry thead="no"><para>28 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2235-mark-all-non-serializable-fields">CA2235</ulink> </para></entry><entry thead="no"><para>Mark all non-serializable fields </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>An instance field of a type that is not serializable is declared in a type that is serializable. </para></entry></row>
<row>
<entry thead="no"><para>29 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2237-mark-iserializable-types-with-serializableattribute">CA2237</ulink> </para></entry><entry thead="no"><para>Mark ISerializable types with serializable </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>To be recognized by the common language runtime as serializable, types must be marked by using the SerializableAttribute attribute even when the type uses a custom serialization routine through implementation of the ISerializable interface. </para></entry></row>
<row>
<entry thead="no"><para>30 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2241-provide-correct-arguments-to-formatting-methods">CA2241</ulink> </para></entry><entry thead="no"><para>Provide correct arguments to formatting methods </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The format argument that is passed to System.String.Format does not contain a format item that corresponds to each object argument, or vice versa. </para></entry></row>
<row>
<entry thead="no"><para>31 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2242-test-for-nan-correctly">CA2242</ulink> </para></entry><entry thead="no"><para>Test for NaN correctly </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>This expression tests a value against Single.Nan or Double.Nan. Use Single.IsNan(Single) or Double.IsNan(Double) to test the value. </para></entry></row>
<row>
<entry thead="no"><para>32 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca2243-attribute-string-literals-should-parse-correctly">CA2243</ulink> </para></entry><entry thead="no"><para>Attribute string literals should parse correctly </para></entry><entry thead="no"><para>Usage </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The string literal parameter of an attribute does not parse correctly for a URL, a GUID, or a version. </para></entry></row>
<row>
<entry thead="no"><para>33 </para></entry><entry thead="no"><para>CA2300 </para></entry><entry thead="no"><para>Do not use insecure deserializer BinaryFormatter </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The method &apos;{0}&apos; is insecure when deserializing untrusted data. If you need to instead detect BinaryFormatter deserialization without a SerializationBinder set, then disable rule CA2300, and enable rules CA2301 and CA2302. </para></entry></row>
<row>
<entry thead="no"><para>34 </para></entry><entry thead="no"><para>CA2301 </para></entry><entry thead="no"><para>Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The method &apos;{0}&apos; is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph. </para></entry></row>
<row>
<entry thead="no"><para>35 </para></entry><entry thead="no"><para>CA2302 </para></entry><entry thead="no"><para>Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The method &apos;{0}&apos; is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph. </para></entry></row>
<row>
<entry thead="no"><para>36 </para></entry><entry thead="no"><para>CA2305 </para></entry><entry thead="no"><para>Do not use insecure deserializer LosFormatter </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The method &apos;{0}&apos; is insecure when deserializing untrusted data. </para></entry></row>
<row>
<entry thead="no"><para>37 </para></entry><entry thead="no"><para>CA2310 </para></entry><entry thead="no"><para>Do not use insecure deserializer NetDataContractSerializer </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The method &apos;{0}&apos; is insecure when deserializing untrusted data. If you need to instead detect NetDataContractSerializer deserialization without a SerializationBinder set, then disable rule CA2310, and enable rules CA2311 and CA2312. </para></entry></row>
<row>
<entry thead="no"><para>38 </para></entry><entry thead="no"><para>CA2311 </para></entry><entry thead="no"><para>Do not deserialize without first setting NetDataContractSerializer.Binder </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The method &apos;{0}&apos; is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph. </para></entry></row>
<row>
<entry thead="no"><para>39 </para></entry><entry thead="no"><para>CA2312 </para></entry><entry thead="no"><para>Ensure NetDataContractSerializer.Binder is set before deserializing </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The method &apos;{0}&apos; is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph. </para></entry></row>
<row>
<entry thead="no"><para>40 </para></entry><entry thead="no"><para>CA2315 </para></entry><entry thead="no"><para>Do not use insecure deserializer ObjectStateFormatter </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>The method &apos;{0}&apos; is insecure when deserializing untrusted data. </para></entry></row>
<row>
<entry thead="no"><para>41 </para></entry><entry thead="no"><para>CA3001 </para></entry><entry thead="no"><para>Review code for SQL injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential SQL injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>42 </para></entry><entry thead="no"><para>CA3002 </para></entry><entry thead="no"><para>Review code for XSS vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential cross-site scripting (XSS) vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>43 </para></entry><entry thead="no"><para>CA3003 </para></entry><entry thead="no"><para>Review code for file path injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential file path injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>44 </para></entry><entry thead="no"><para>CA3004 </para></entry><entry thead="no"><para>Review code for information disclosure vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential information disclosure vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may contain unintended information from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>45 </para></entry><entry thead="no"><para>CA3005 </para></entry><entry thead="no"><para>Review code for LDAP injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential LDAP injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>46 </para></entry><entry thead="no"><para>CA3006 </para></entry><entry thead="no"><para>Review code for process command injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential process command injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>47 </para></entry><entry thead="no"><para>CA3007 </para></entry><entry thead="no"><para>Review code for open redirect vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential open redirect vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>48 </para></entry><entry thead="no"><para>CA3008 </para></entry><entry thead="no"><para>Review code for XPath injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential XPath injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>49 </para></entry><entry thead="no"><para>CA3009 </para></entry><entry thead="no"><para>Review code for XML injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential XML injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>50 </para></entry><entry thead="no"><para>CA3010 </para></entry><entry thead="no"><para>Review code for XAML injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential XAML injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>51 </para></entry><entry thead="no"><para>CA3011 </para></entry><entry thead="no"><para>Review code for DLL injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential DLL injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>52 </para></entry><entry thead="no"><para>CA3012 </para></entry><entry thead="no"><para>Review code for regex injection vulnerabilities </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Potential regex injection vulnerability was found where &apos;{0}&apos; in method &apos;{1}&apos; may be tainted by user-controlled data from &apos;{2}&apos; in method &apos;{3}&apos;. </para></entry></row>
<row>
<entry thead="no"><para>53 </para></entry><entry thead="no"><para>CA3061 </para></entry><entry thead="no"><para>Do Not Add Schema By URL </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>This overload of XmlSchemaCollection.Add method internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector. </para></entry></row>
<row>
<entry thead="no"><para>54 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca5350-do-not-use-weak-cryptographic-algorithms">CA5350</ulink> </para></entry><entry thead="no"><para>Do Not Use Weak Cryptographic Algorithms </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Cryptographic algorithms degrade over time as attacks become for advances to attacker get access to more computation. Depending on the type and application of this cryptographic algorithm, further degradation of the cryptographic strength of it may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA-2 512, SHA-2 384, or SHA-2 256. </para></entry></row>
<row>
<entry thead="no"><para>55 </para></entry><entry thead="no"><para><ulink url="https://docs.microsoft.com/visualstudio/code-quality/ca5351-do-not-use-broken-cryptographic-algorithms">CA5351</ulink> </para></entry><entry thead="no"><para>Do Not Use Broken Cryptographic Algorithms </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>An attack making it computationally feasible to break this algorithm exists. This allows attackers to break the cryptographic guarantees it is designed to provide. Depending on the type and application of this cryptographic algorithm, this may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA512, SHA384, or SHA256. Replace digital signature uses with RSA with a key length greater than or equal to 2048-bits, or ECDSA with a key length greater than or equal to 256 bits. </para></entry></row>
<row>
<entry thead="no"><para>56 </para></entry><entry thead="no"><para>CA5358 </para></entry><entry thead="no"><para>Do Not Use Unsafe Cipher Modes </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>These modes are vulnerable to attacks. Use only approved modes (CBC, CTS). </para></entry></row>
<row>
<entry thead="no"><para>57 </para></entry><entry thead="no"><para>CA5359 </para></entry><entry thead="no"><para>Do Not Disable Certificate Validation </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>A certificate can help authenticate the identity of the server. Clients should validate the server certificate to ensure requests are sent to the intended server. If the ServerCertificateValidationCallback always returns &apos;true&apos;, any certificate will pass validation. </para></entry></row>
<row>
<entry thead="no"><para>58 </para></entry><entry thead="no"><para>CA5360 </para></entry><entry thead="no"><para>Do Not Call Dangerous Methods In Deserialization </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Insecure Deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of an application, inflict a Denial-of-Service (DoS) attack, or even execute arbitrary code upon it being deserialized. It’s frequently possible for malicious users to abuse these deserialization features when the application is deserializing untrusted data which is under their control. Specifically, invoke dangerous methods in the process of deserialization. Successful insecure deserialization attacks could allow an attacker to carry out attacks such as DoS attacks, authentication bypasses, and remote code execution. </para></entry></row>
<row>
<entry thead="no"><para>59 </para></entry><entry thead="no"><para>CA5361 </para></entry><entry thead="no"><para>Do Not Disable SChannel Use of Strong Crypto </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Starting with the .NET Framework 4.6, the System.Net.ServicePointManager and System.Net.Security.SslStream classes are recommeded to use new protocols. The old ones have protocol weaknesses and are not supported. Setting Switch.System.Net.DontEnableSchUseStrongCrypto with true will use the old weak crypto check and opt out of the protocol migration. </para></entry></row>
<row>
<entry thead="no"><para>60 </para></entry><entry thead="no"><para>CA5362 </para></entry><entry thead="no"><para>Do Not Refer Self In Serializable Class </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>This can allow an attacker to DOS or exhaust the memory of the process. </para></entry></row>
<row>
<entry thead="no"><para>61 </para></entry><entry thead="no"><para>CA5363 </para></entry><entry thead="no"><para>Do Not Disable Request Validation </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Request validation is a feature in ASP.NET that examines HTTP requests and determines whether they contain potentially dangerous content. This check adds protection from markup or code in the URL query string, cookies, or posted form values that might have been added for malicious purposes. So, it is generally desirable and should be left enabled for defense in depth. </para></entry></row>
<row>
<entry thead="no"><para>62 </para></entry><entry thead="no"><para>CA5364 </para></entry><entry thead="no"><para>Do Not Use Deprecated Security Protocols </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Using a deprecated security protocol rather than the system default is risky. </para></entry></row>
<row>
<entry thead="no"><para>63 </para></entry><entry thead="no"><para>CA5365 </para></entry><entry thead="no"><para>Do Not Disable HTTP Header Checking </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>HTTP header checking enables encoding of the carriage return and newline characters,  and <linebreak/>
, that are found in response headers. This encoding can help to avoid injection attacks that exploit an application that echoes untrusted data contained by the header. </para></entry></row>
<row>
<entry thead="no"><para>64 </para></entry><entry thead="no"><para>CA5367 </para></entry><entry thead="no"><para>Do Not Serialize Types With Pointer Fields </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Pointers are not &quot;type safe&quot; in the sense that you cannot guarantee the correctness of the memory they point at. So, serializing types with pointer fields is dangerous, as it may allow an attacker to control the pointer. </para></entry></row>
<row>
<entry thead="no"><para>65 </para></entry><entry thead="no"><para>CA5368 </para></entry><entry thead="no"><para>Set ViewStateUserKey For Classes Derived From Page </para></entry><entry thead="no"><para>Security </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>Setting the ViewStateUserKey property can help you prevent attacks on your application by allowing you to assign an identifier to the view-state variable for individual users so that they cannot use the variable to generate an attack. Otherwise, there will be cross-site request forgery vulnerabilities. </para></entry></row>
</table>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
