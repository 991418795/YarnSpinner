<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="a00095" kind="class" prot="public">
    <compoundname>CsvHelper::TypeConversion::EnumerableConverter</compoundname>
    <basecompoundref refid="a00084" prot="public" virt="non-virtual">CsvHelper.TypeConversion.DefaultTypeConverter</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00095_1a692617638507cd1033728d7f718fcd2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override object</type>
        <definition>override object CsvHelper.TypeConversion.EnumerableConverter.ConvertFromString</definition>
        <argsstring>(TypeConverterOptions options, string text)</argsstring>
        <name>ConvertFromString</name>
        <reimplements refid="a00084_1a804ea00060e1de70e5151f90d3bfce9b">ConvertFromString</reimplements>
        <param>
          <type><ref refid="a00156" kindref="compound">TypeConverterOptions</ref></type>
          <declname>options</declname>
        </param>
        <param>
          <type>string</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Throws an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>The options to use when converting.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert to an object.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The object created from the string.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" line="24" column="1" bodyfile="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="a00095_1a7e07e9532857d748654d37db590a0e11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override string</type>
        <definition>override string CsvHelper.TypeConversion.EnumerableConverter.ConvertToString</definition>
        <argsstring>(TypeConverterOptions options, object value)</argsstring>
        <name>ConvertToString</name>
        <reimplements refid="a00084_1a36cb2f9b24f15a671293f3a722324c27">ConvertToString</reimplements>
        <param>
          <type><ref refid="a00156" kindref="compound">TypeConverterOptions</ref></type>
          <declname>options</declname>
        </param>
        <param>
          <type>object</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Throws an exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>The options to use when converting.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to convert to a string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation of the object.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" line="37" column="1" bodyfile="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="a00095_1af66a7c67041f4c8061aa66e9e36359cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool CsvHelper.TypeConversion.EnumerableConverter.CanConvertFrom</definition>
        <argsstring>(Type type)</argsstring>
        <name>CanConvertFrom</name>
        <reimplements refid="a00084_1a470d21adaa704eb281250dbd112ff91a">CanConvertFrom</reimplements>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Determines whether this instance [can convert from] the specified type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this instance [can convert from] the specified type; otherwise, <computeroutput>false</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" line="51" column="1" bodyfile="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="a00095_1a44d625b44f770b945a29cd89e399f90f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool CsvHelper.TypeConversion.EnumerableConverter.CanConvertTo</definition>
        <argsstring>(Type type)</argsstring>
        <name>CanConvertTo</name>
        <reimplements refid="a00084_1acb65bd8c8199d88d5b1629ae35d18514">CanConvertTo</reimplements>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Determines whether this instance [can convert to] the specified type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this instance [can convert to] the specified type; otherwise, <computeroutput>false</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" line="63" column="1" bodyfile="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" bodystart="63" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Throws an exception when used. This is here so that it&apos;s apparent that there is no support for IEnumerable type coversion. A custom converter will need to be created to have a field convert to and from an IEnumerable. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1165">
        <label>CsvHelper.TypeConversion.EnumerableConverter</label>
        <link refid="a00095"/>
        <childnode refid="1166" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1167">
        <label>ITypeConverter</label>
        <link refid="a00117"/>
      </node>
      <node id="1166">
        <label>DefaultTypeConverter</label>
        <link refid="a00084"/>
        <childnode refid="1167" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1168">
        <label>CsvHelper.TypeConversion.EnumerableConverter</label>
        <link refid="a00095"/>
        <childnode refid="1169" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1170">
        <label>ITypeConverter</label>
        <link refid="a00117"/>
      </node>
      <node id="1169">
        <label>DefaultTypeConverter</label>
        <link refid="a00084"/>
        <childnode refid="1170" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" line="17" column="1" bodyfile="/home/travis/build/thesecretlab/YarnSpinner/packages/CsvHelper.2.16.0.0/src/CsvHelper/TypeConversion/EnumerableConverter.cs" bodystart="16" bodyend="67"/>
    <listofallmembers>
      <member refid="a00095_1af66a7c67041f4c8061aa66e9e36359cf" prot="public" virt="virtual"><scope>CsvHelper::TypeConversion::EnumerableConverter</scope><name>CanConvertFrom</name></member>
      <member refid="a00095_1a44d625b44f770b945a29cd89e399f90f" prot="public" virt="virtual"><scope>CsvHelper::TypeConversion::EnumerableConverter</scope><name>CanConvertTo</name></member>
      <member refid="a00095_1a692617638507cd1033728d7f718fcd2a" prot="public" virt="virtual"><scope>CsvHelper::TypeConversion::EnumerableConverter</scope><name>ConvertFromString</name></member>
      <member refid="a00095_1a7e07e9532857d748654d37db590a0e11" prot="public" virt="virtual"><scope>CsvHelper::TypeConversion::EnumerableConverter</scope><name>ConvertToString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
